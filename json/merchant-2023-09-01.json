{
  "openapi": "3.0.0",
  "info": {
    "title": "Merchant API",
    "version": "2023-09-01",
    "description": "Welcome to the Revolut Merchant API - your solution to managing the core aspects of e-commerce and accepting online payments. Whether you're a startup, a growing business, or an established enterprise in the e-commerce industry, our API helps you streamline your operations.\n\nAs a Revolut Business customer with a Merchant Account, you can use the\nMerchant API to leverage the following features:\n\n- [Order management](https://developer.revolut.com/docs/merchant/2023-09-01/orders)\n- [Customer management](https://developer.revolut.com/docs/merchant/2023-09-01/customers)\n- [Payment management](https://developer.revolut.com/docs/merchant/2023-09-01/payments)\n- [Reporting analytics](https://developer.revolut.com/docs/merchant/2023-09-01/report-runs)\n- [Webhook management](https://developer.revolut.com/docs/merchant/2023-09-01/webhooks)\n- [Location management](https://developer.revolut.com/docs/merchant/2023-09-01/locations)\n\n... and more.\n\n### API versions\n\n:::caution\nWe highly recommend using versioning in your API calls. If you don't provide a version header on the operations where it's required, you will receive an error response.\n:::\n\nThe Merchant API uses request header versioning. Where it is required you need to use the `Revolut-Api-Version` header parameter to specify an API version. Each request, where it is indicated in the API specification, must contain a version header in the following format:\n  \n```\n'Revolut-Api-Version: 2023-09-01'\n```\n\n:::info\nFor more information, see: [API versions](https://developer.revolut.com/docs/merchant/2023-09-01/api-versions)\n:::\n\n### Test the Merchant API\n\nYou can test the Merchant API in Postman by forking this collection:\n\n[![View in Postman](https://run.pstmn.io/button.svg)](https://www.postman.com/revolut-api/workspace/revolut-developers/overview)",
    "contact": {}
  },
  "servers": [
    {
      "description": "Production server (uses live data)",
      "url": "https://merchant.revolut.com"
    },
    {
      "description": "Sandbox server (uses test data)",
      "url": "https://sandbox-merchant.revolut.com"
    }
  ],
  "security": [
    {
      "Api-Key": []
    }
  ],
  "tags": [
    {
      "name": "Orders",
      "description": "The Orders resource in the Merchant API offers a comprehensive solution for managing the lifecycle of orders within your e-commerce or retail platform. Designed to streamline order processing, this resource encapsulates a suite of operations that allow for efficiently handling order management-related tasks. For more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n\nThese operations are equipped to handle various order management scenarios, providing a robust interface for businesses to interact with their order data. \n\nTo process a payment related to your customers' purchases, you need to create an `Order` object. Then you can use an order's unique `token` to process and accept payments via the Revolut Checkout Widget.\n\n:::caution\nThe [Create an order endpoint](https://developer.revolut.com/docs/merchant/create-order) was updated to a new version and now returns `token` as the public identifier for the order. Previous integrations might still use the deprecated endpoint returning `public_id`.\n\nWe strongly advise upgrading to the new [Create an order endpoint](https://developer.revolut.com/docs/merchant/create-order).\n:::"
    },
    {
      "name": "Customers",
      "description": "The Customers resource in the Merchant API is a pivotal tool for tracking and managing customer-related transactions within your e-commerce or retail platform. This resource provides a structured approach to customer management, enabling you to maintain a consistent record of customer transactions.\n\nA `Customer` object can be created using the [Create a customer](https://developer.revolut.com/docs/merchant/create-customer) endpoint and you can then retrieve, update and delete a customer using its `id`. `Customer` objects enable you to track multiple transactions in your system associated with the same customer in the Merchant API.\n\nYou can save and store payment methods of a customer in the `payment_method` object, for more information, see: [Charge a customer's saved payment method](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/charge-saved-payment-method). A merchant can store the details of the payment securely and group transactions from the same payment method in their system. \n\nA payment method is unique for each customer. For example, if the same card is used for a transaction by two different customers, two payment method objects are created linked to each customer.\n\nSimilar principle applies when saving payment methods via Revolut Pay for merchant initiated transaction (MIT - useful for recurring payments). If a customer saves their details through Revolut Pay for MIT in separate sessions, each session will create a new payment method object linked to the customer.\n\n:::note\nYou cannot create a payment method explicitly because they are generated as part of a payment. You can only retrieve, update or delete a payment method, or you can retrieve all payment methods of a customer.\n:::"
    },
    {
      "name": "Payments",
      "description": "Payment operations enable you to initiate payments, or track payment status transitions. You can use the ID of the payment to retrieve information about a specific payment.\n\n:::info\nFor more information about the payment lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::"
    },
    {
      "name": "Payouts",
      "description": "Endpoints for retrieving information about payouts, allowing merchants to access details of funds withdrawn from their Merchant account to external bank accounts.\n\nMerchants can use these endpoints to retrieve a list of payouts and specific payout details. The payout IDs obtained can be used to [generate detailed reports](https://developer.revolut.com/docs/merchant/report-runs) that provide comprehensive breakdowns of all transactions contributing to the payout amounts.\n\nPayout information, including IDs, can be retrieved via the [Retrieve payout list](https://developer.revolut.com/docs/merchant/retrieve-payout-list) endpoint or from [webhook events related to payouts](https://developer.revolut.com/docs/merchant/create-webhook#callbacks)."
    },
    {
      "name": "Report runs",
      "description": "In addition to the CSV statements you can export via the [Revolut Business Dashboard](https://business.revolut.com/merchant/statement), you can generate custom CSV reports using the **Report runs** operations. Unlike the default statements, creating custom reports offers you more flexibility in determining what data you wish to incorporate. This allows you to have more control over your analytics.\n\nFor more information about how to generate custom CSV reports, see: [Create CSV reports of transactions](https://developer.revolut.com/docs/guides/accept-payments/tutorials/create-csv-reports)."
    },
    {
      "name": "Webhooks",
      "description": "A `webhook` (also called a web callback) allows your system to receive an event from a different app immediately after it happens. \n\nFor example, you can subscribe to a webhook when an order changes from `pending` to `completed` status. When the payment is cleared and the order is completed, Revolut servers send a notification to the URL of your choice. This is a more efficient way to know when an order is paid as opposed to trying to get the status of the order every few seconds.\n\nMany events that happen to a Revolut Merchant account are synchronous, which means they arrive instantly and have immediate results. For example, a successful request to create a customer immediately returns a `Customer` object. Such requests don't require webhooks.\n\nThe Revolut Merchant API supports webhooks for events including `ORDER_COMPLETED` and `ORDER_AUTHORISED`.\n\n:::note\nBecause we cannot guarantee the delivery order of the status (`events`), you might receive the status not in the expected order. Make sure that your implementation does not rely on the order that the events are being received in.\n:::\n\nFor example, for a completed order, you should receive the `ORDER_AUTHORISED` status first and then `ORDER_COMPLETED`. However, if the `ORDER_AUTHORISED` status isn't sent successfully at first, it's moved to the queue to be resent in the next few minutes. Before then, if the `ORDER_COMPLETED` status is sent successfully, you get `ORDER_COMPLETED` first and then `ORDER_AUTHORISED`.\n\nCheck out our tutorial for [Using webhooks to keep track of the payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/tutorials/work-with-webhooks/using-webhooks).\n\n:::info\nFor more information about the order and payment lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::"
    },
    {
      "name": "Locations",
      "description": "The Locations API is designed to allow merchants to manage multiple online storefronts. Registering locations lets you differentiate and group your orders from different stores. You can also introduce custom processes for your orders on each location.\n\nFor example, you can enable [Revolut Pay with Fast checkout](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout) and run different address validations or have different shipping price applied on each location. \n\nTo start using locations, you need to do the following:\n\n1. Register an online location using the [Create a location](https://developer.revolut.com/docs/merchant/create-location) endpoint.\n1. Optionally, if you wish to use locations with Revolut Pay - Fast checkout, then [register multiple address validation endpoints](https://developer.revolut.com/docs/merchant/register-address-validation-endpoint) with the `location_id` parameter pointing to your locations. \n\n  :::info\n  For more information about this step, see: [Set up webhook for address validation](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout#step-1-set-up-webhook-for-address-validation)\n  :::\n1. Configure your custom processes on your backend for each registered location (e.g., grouping orders, address validation, custom pricing, etc.).\n\n  :::info\n  For more information about address validation for Fast checkout, see: [Set up your backend to respond to address validation requests](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout#step-2-set-up-your-backend-to-respond-to-address-validation-requests)\n  :::\n1. Send the `location_id` parameter in the request body during [order creation](https://developer.revolut.com/docs/merchant/create-order) to assign the order to a specific location."
    },
    {
      "name": "Apple Pay merchant registration",
      "description": "Operations for managing a merchant's domain registration and configuration with Apple for integration of Apple Pay via Revolut.\n\nThis includes initiating domain validation with Apple, a necessary step for merchants to offer Apple Pay as a payment method on their websites or apps.\n\nThese endpoints interact with Apple's [Apple Pay Web Merchant Registration services](https://developer.apple.com/documentation/applepaywebmerchantregistrationapi)."
    },
    {
      "name": "Other",
      "description": "Other operations that can be done with the Merchant API."
    }
  ],
  "paths": {
    "/api/orders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version"
        }
      ],
      "post": {
        "summary": "Create an order",
        "operationId": "createOrder",
        "description": "Create an `Order` object.\n\nCreating orders is one of the basic operations of the Merchant API. Most of the other operations are related to creating orders. Furthermore, the payment methods merchants can use to take payments for their orders are also building on order creation.\n\nTo learn more about how you can accept payments, see:\n  - [Revolut Pay](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/introduction)\n  - [Card payments](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/card-payments/introduction)\n  - [Apple Pay and Google Pay](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/apple-pay-google-pay/introduction)\n  - [Payment links](https://developer.revolut.com/docs/guides/accept-payments/tutorials/payment-link)\n\n<details>\n<summary>Industry-specific requirements</summary>\n\nIf you operate in any of the industries listed below, sharing industry-specific data is highly encouraged. Not providing the necessary information may result in further scrutiny from the Revolut risk team and/or the imposition of risk mitigation actions.\n\n| Industry | Related fields |\n| ------- | --------------- |\n| Airlines and Online Travel Agencies (OTAs) | `industry_data` with `type: airline` |\n| Crypto merchants | `industry_data` with `type: crypto` |\n| Marketplace merchants | `industry_data` with `type: marketplace` |\n| Event ticket sellers | `industry_data` with `type: event` |\n| Lodging providers | `industry_data` with `type: lodging` |\n\n</details>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order-Creation-v2"
              },
              "examples": {
                "example_order_min": {
                  "$ref": "#/components/examples/Req-Order-Min"
                },
                "example_order_additional": {
                  "$ref": "#/components/examples/Req-Order-Additional"
                },
                "example_order_airline": {
                  "$ref": "#/components/examples/Req-Order-Airline"
                },
                "example_order_crypto": {
                  "$ref": "#/components/examples/Req-Order-Crypto"
                },
                "example_order_marketplace": {
                  "$ref": "#/components/examples/Req-Order-Marketplace"
                },
                "example_order_event": {
                  "$ref": "#/components/examples/Req-Order-Event"
                },
                "example_order_lodging": {
                  "$ref": "#/components/examples/Req-Order-Lodging"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order-v2"
                },
                "examples": {
                  "example_order_min": {
                    "$ref": "#/components/examples/Res-Order-Min"
                  },
                  "example_order_additional": {
                    "$ref": "#/components/examples/Res-Order-Additional"
                  },
                  "example_order_airline": {
                    "$ref": "#/components/examples/Res-Order-Airline"
                  },
                  "example_order_crypto": {
                    "$ref": "#/components/examples/Res-Order-Crypto"
                  },
                  "example_order_marketplace": {
                    "$ref": "#/components/examples/Res-Order-Marketplace"
                  },
                  "example_order_event": {
                    "$ref": "#/components/examples/Res-Order-Event"
                  },
                  "example_order_lodging": {
                    "$ref": "#/components/examples/Res-Order-Lodging"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "bad_request",
                  "message": "Could not parse JSON",
                  "timestamp": 1721049596461
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                }
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Api-Key": []
          }
        ]
      }
    },
    "/api/orders/{order_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version"
        },
        {
          "$ref": "#/components/parameters/Order-Id"
        }
      ],
      "get": {
        "summary": "Retrieve an order",
        "operationId": "retrieveOrder",
        "description": "Retrieve the details of an order that has been created. Provide the unique\norder ID, and the corresponding order information is returned.",
        "responses": {
          "200": {
            "description": "Order retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order-v2"
                },
                "examples": {
                  "example_order_min": {
                    "$ref": "#/components/examples/Res-Order-Min"
                  },
                  "example_order_additional": {
                    "$ref": "#/components/examples/Res-Order-Additional"
                  },
                  "example_order_airline": {
                    "$ref": "#/components/examples/Res-Order-Airline"
                  },
                  "example_order_crypto": {
                    "$ref": "#/components/examples/Res-Order-Crypto"
                  },
                  "example_order_marketplace": {
                    "$ref": "#/components/examples/Res-Order-Marketplace"
                  },
                  "example_order_event": {
                    "$ref": "#/components/examples/Res-Order-Event"
                  },
                  "example_order_lodging": {
                    "$ref": "#/components/examples/Res-Order-Lodging"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "bad_request",
                      "message": "Could not parse JSON",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "not_found",
                  "message": "Order with id abfa5bbd-a20c-4a0e-be66-30e733454518 was not found",
                  "timestamp": 1721050063886
                }
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Api-Key": []
          }
        ]
      },
      "patch": {
        "summary": "Update an order",
        "operationId": "updateOrder",
        "description": "Update the details of an order.\n\nYou can update an order and specific parameters based on the value of the `state` parameter:\n  \n| State parameter value | Modifiable parameters |\n| --------------------- | --------------------- |\n| `pending` | You can modify all listed parameters. |\n| `authorised` | You can modify the following parameters: <br /><br /> <ul><li>`merchant_order_data.reference`</li><li>`description`</li><li>`metadata`</li><li>`shipping_address`</li><li>`industry_data`</li><li>`cancel_authorised_after`</li></ul> |\n| `completed` | You can modify the following parameters: <br /><br /> <ul><li>`merchant_order_data.reference`</li><li>`description`</li><li>`metadata`</li><li>`shipping_address`</li><li>`industry_data`</li></ul> |\n| `processing` | You cannot modify parameters. |\n\n:::info\nFor more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order-Update-v2"
              },
              "examples": {
                "example_update_order": {
                  "summary": "Example order update",
                  "value": {
                    "amount": 1000,
                    "currency": "EUR",
                    "settlement_currency": "GBP",
                    "capture_mode": "manual",
                    "cancel_authorised_after": "P3D",
                    "metadata": {
                      "example_key": "example_value"
                    },
                    "merchant_order_data": {
                      "url": "https://example.com/orders/12345"
                    },
                    "statement_descriptor_suffix": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order-v2"
                },
                "examples": {
                  "example_order_updated": {
                    "summary": "Example order update response",
                    "value": {
                      "id": "651a941a-02ef-af6f-9b6c-458c652e2c6a",
                      "token": "0aa685ee-8d86-441d-bedd-3f7fbf41731b",
                      "type": "payment",
                      "state": "pending",
                      "created_at": "2023-10-02T09:57:46.498026Z",
                      "updated_at": "2023-10-02T11:54:46.648414Z",
                      "amount": 1000,
                      "currency": "EUR",
                      "outstanding_amount": 1000,
                      "settlement_currency": "GBP",
                      "capture_mode": "manual",
                      "cancel_authorised_after": "P3D",
                      "checkout_url": "https://checkout.revolut.com/payment-link/0aa685ee-8d86-441d-bedd-3f7fbf41731b",
                      "metadata": {
                        "example_key": "example_value"
                      },
                      "enforce_challenge": "automatic",
                      "merchant_order_data": {
                        "url": "https://example.com/orders/12345"
                      },
                      "statement_descriptor_suffix": "12345"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "bad_request",
                  "message": "Could not parse JSON",
                  "timestamp": 1721049596461
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "not_found",
                  "message": "Order with id abfa5bbd-a20c-4a0e-be66-30e733454518 was not found",
                  "timestamp": 1721050063886
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "order_invalid_state",
                  "message": "Operation cannot be performed because order is in completed state and expected is [pending]",
                  "timestamp": 1721049952145
                }
              }
            }
          }
        },
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Api-Key": []
          }
        ]
      }
    },
    "/api/1.0/orders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Retrieve an order list",
        "operationId": "retrieveOrderList",
        "description": "Retrieve all the orders that you've created. You can also use the query parameters for:\n\n  | Filtering | Pagination |\n  | --------- | ---------- |\n  | Filter the orders that you want to retrieve, for example, only retrieve the orders that have a specific email. <br/><br/>Parameters used for filtering:<br/><ul><li>`from_created_date`</li><li>`to_created_date`</li><li>`customer_id`</li><li>`email`</li><li>`merchant_order_ext_ref`</li><li>`state`</li></ul> | View the orders without loading all of them at once, for example, return a specified number of orders per page. <br/><br/>Parameters used for pagination: <br/><ul><li>`limit`</li><li>`created_before`</li></ul> |\n\nThe response contains an array of simplified `Order` objects. To get the full details of an `Order` object, use the [Retrieve an order](https://developer.revolut.com/docs/merchant/retrieve-order) endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            },
            "in": "query",
            "name": "limit",
            "description": "The maximum number of orders returned per page. Used for **pagination**."
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "created_before",
            "description": "Retrieve orders with a `created_date` < `created_before`. Used for **pagination**. Use the `created_date` of the last order returned in the previous response to get to the next page.\n\nThe default value is the current date and time you are calling the endpoint."
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "from_created_date",
            "description": "Retrieve all orders with a `created_date` ≥ `from_created_date`. Used for **filtering**.\n\nUse the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss[.SSSSSS]Z`. For example, `2021-02-10T16:59:50.886826Z`."
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "in": "query",
            "name": "to_created_date",
            "description": "Retrieve all orders with a `created_date` ≤ `to_created_date`. Used for **filtering**.\n\nUse the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss[.SSSSSS]Z`. For example, `2021-02-10T16:59:50.886826Z`."
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "customer_id",
            "description": "Retrieve all orders that have this `customer_id` associated to them. Used for **filtering**."
          },
          {
            "schema": {
              "type": "string",
              "format": "email"
            },
            "in": "query",
            "name": "email",
            "description": "Retrieve all orders that have this `email` associated to them. Used for **filtering**. \n\nThis parameter is case sensitive."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "merchant_order_ext_ref",
            "description": "Merchant order ID for external reference. Use this field to filter and retrieve all the orders that have this ID. Used for **filtering**. \n\nThis parameter is case sensitive."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "PROCESSING",
                  "AUTHORISED",
                  "COMPLETED",
                  "CANCELLED",
                  "FAILED"
                ]
              }
            },
            "style": "form",
            "explode": true,
            "in": "query",
            "name": "state",
            "description": "Retrieve all orders with specific states. You can pass several states. Used for **filtering**.\n\nIf multiple states are selected, for example `AUTHORISED` and `COMPLETED`, orders with either of the selected values are returned. See this example of such a request URL: \n\n```curl\nhttps://merchant.revolut.com/api/1.0/orders?state=AUTHORISED&state=COMPLETED\n```\n\nThe parameter is case sensitive."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Simplified-Order"
                  }
                },
                "examples": {
                  "list_of_orders": {
                    "summary": "List of orders",
                    "value": [
                      {
                        "id": "f0d685f4-07ab-4eff-ba80-5811303c607d",
                        "type": "PAYMENT",
                        "state": "PENDING",
                        "created_at": "2021-02-10T18:17:37.959383Z",
                        "updated_at": "2021-02-10T18:17:37.959383Z",
                        "order_amount": {
                          "value": 35000,
                          "currency": "GBP"
                        },
                        "order_outstanding_amount": {
                          "value": 35000,
                          "currency": "GBP"
                        }
                      },
                      {
                        "id": "feca684a-b9ea-4033-9bc4-b9e6ac12ada6",
                        "type": "PAYMENT",
                        "state": "COMPLETED",
                        "created_at": "2021-02-10T16:59:23.642673Z",
                        "updated_at": "2021-02-10T16:59:50.886826Z",
                        "completed_at": "2021-02-10T16:59:50.886826Z",
                        "settlement_currency": "USD",
                        "email": "sally.gibson@lloydsbank.co.uk",
                        "order_amount": {
                          "value": 1000,
                          "currency": "GBP"
                        },
                        "order_outstanding_amount": {
                          "value": 0,
                          "currency": "GBP"
                        }
                      },
                      {
                        "id": "f3c5e3f1-f73a-4853-a9e3-b0261301c66a",
                        "type": "PAYMENT",
                        "state": "COMPLETED",
                        "created_at": "2021-02-10T16:58:47.507560Z",
                        "updated_at": "2021-02-10T16:59:52.847017Z",
                        "completed_at": "2021-02-10T16:59:52.847017Z",
                        "description": "URBAN 'Panther' Watch by José Almeida",
                        "capture_mode": "AUTOMATIC",
                        "merchant_order_ext_ref": "testorder123",
                        "customer_id": "31345442-3d03-4c4b-8354-3bdaf0ca9600",
                        "email": "someothermail@gmail.com",
                        "order_amount": {
                          "value": 777,
                          "currency": "GBP"
                        },
                        "order_outstanding_amount": {
                          "value": 0,
                          "currency": "GBP"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{order_id}/capture": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version"
        },
        {
          "$ref": "#/components/parameters/Order-Id"
        }
      ],
      "post": {
        "summary": "Capture an order",
        "operationId": "captureOrder",
        "description": "This endpoint is used to capture the funds of an existing, uncaptured order. When the payment for an order is authorised, you can capture the order to send it to the processing stage.\n\n:::info\nFor more information about the order and payment lifecycle, see: [Order and payment\nlifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::\n\n## Capture modes\n\nWhen you [create an order](https://developer.revolut.com/docs/merchant/create-order), you can choose one of the following capture modes:\n\n  | **Capture mode** | **Description** |\n  | ---------------- | --------------- |\n  | `automatic` | The order is captured automatically after payment authorisation. No further actions are needed. |\n  | `manual` | The order is not captured automatically and stays in `authorised` state. You must manually capture the order using the steps outlined below. |\n\n:::caution\nUncaptured orders remain in `authorised` state **for 7 days**. If not captured within this period, the funds are returned to the customer's original payment method.\n:::\n\n### Manual capture\n  \nTo capture an order manually, use one of the following methods:\n  \n| **Web UI** | **Merchant API** |\n| ---------- | ------------ |\n| <ol><li>Log in to your [Revolut Business portal](https://business.revolut.com).</li><li>Navigate to the **Merchant** tab on the dashboard, and click the **See all** button in the **Transactions** section.</li><li>Select an uncaptured payment, and click **Capture**.</li></ol> | Use the `/capture` endpoint. |\n\n:::info\nFor more information about manually capturing an order, see: [Authorise an amount to capture\nlater](https://developer.revolut.com/docs/guides/accept-payments/tutorials/capture-later).\n:::\n\n#### Partial capture\n \nYou have the option to capture only a fraction of the full amount. In such cases, the uncaptured portion of the amount will be voided.\n\n:::caution\nThe following limitations apply to manual captures:\n  - It's not possible to capture an amount multiple times\n  - Captured amount can't exceed the authorised amount\n  - On Web UI, only capturing full amount is possible\n  - `0` amount captures are not allowed\n  - For partial captures, you can only resend the request with the initial amount\n:::\n\n## Idempotency and repeated requests\n\nThe capture operation is idempotent. This means that an order can only be captured once. If you send a capture request more than once:\n\n- The first valid request captures the order and moves it to the processing stage.\n- Any subsequent capture requests for the same order will not recapture the funds. Instead, these requests will behave like a [Retrieve an order](https://developer.revolut.com/docs/merchant/retrieve-order) request. The response will provide the current state of the order as if you queried it using the order retrieval endpoint.\n\n:::info\nUtilising the idempotent nature of this endpoint helps maintain data consistency and prevents duplicate processing of the same order.\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "Specify an amount to capture, in minor currency units. The amount must not exceed the authorised amount. \n\nIf order has been previously captured, the amount must be equal to the initially captured amount. Uncaptured amount will be voided.\n\nIf not provided, it defaults to the authorised amount (full capture will be executed)."
                  }
                }
              },
              "example": {
                "amount": 100
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order captured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order-v2"
                },
                "examples": {
                  "captured_order": {
                    "summary": "Captured order",
                    "value": {
                      "id": "65c4c739-113d-a608-9128-47c7ca90cbe3",
                      "token": "ebc06202-061e-4d0f-8063-99195fad31fb",
                      "type": "payment",
                      "state": "completed",
                      "created_at": "2024-02-08T12:21:13.022871Z",
                      "updated_at": "2024-02-08T12:21:52.194601Z",
                      "amount": 100,
                      "currency": "GBP",
                      "refunded_amount": 0,
                      "outstanding_amount": 0,
                      "capture_mode": "manual",
                      "payments": [
                        {
                          "id": "65c4c748-bf0d-af8a-9d69-0fc92bc0ff94",
                          "state": "captured",
                          "created_at": "2024-02-08T12:21:28.803165Z",
                          "updated_at": "2024-02-08T12:21:52.191352Z",
                          "token": "74af5a2b-6722-4353-aaf1-cd5926883b60",
                          "amount": 100,
                          "currency": "GBP",
                          "settled_amount": 100,
                          "settled_currency": "GBP",
                          "billing_address": {
                            "country_code": "US",
                            "postcode": "12345"
                          },
                          "risk_level": "low",
                          "fees": [],
                          "payment_method": {
                            "type": "revolut_pay_card",
                            "card_brand": "visa",
                            "funding": "debit",
                            "card_country_code": "US",
                            "card_bin": "529999",
                            "card_last_four": "0368",
                            "card_expiry": "12/28",
                            "cardholder_name": "Test Holder",
                            "checks": {
                              "three_ds": {
                                "state": "verified",
                                "version": 2
                              }
                            }
                          }
                        }
                      ],
                      "enforce_challenge": "automatic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "bad_request",
                      "message": "Could not parse JSON",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "not_found",
                  "message": "Order with id abfa5bbd-a20c-4a0e-be66-30e733454518 was not found",
                  "timestamp": 1721050063886
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{order_id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version-Optional"
        },
        {
          "$ref": "#/components/parameters/Order-Id"
        }
      ],
      "post": {
        "summary": "Cancel an order",
        "operationId": "cancelOrder",
        "description": "Cancel an existing uncaptured order.\n\nYou can only cancel an order that is in one of the following states:\n  \n  | Order state | Description |\n  | ----------- | ----------- |\n  | `pending` | The order does not have any successful payment. |\n  | `authorised` | The `capture_mode` of an order is set to `manual` and the customer has made a successful payment. |\n\n:::info\nFor more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order-v2"
                },
                "examples": {
                  "example_order_min": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Min"
                  },
                  "example_order_additional": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Additional"
                  },
                  "example_order_airline": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Airline"
                  },
                  "example_order_crypto": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Crypto"
                  },
                  "example_order_marketplace": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Marketplace"
                  },
                  "example_order_event": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Event"
                  },
                  "example_order_lodging": {
                    "$ref": "#/components/examples/Res-Order-Cancel-Lodging"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "bad_request",
                      "message": "Could not parse JSON",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "not_found",
                  "message": "Order with id abfa5bbd-a20c-4a0e-be66-30e733454518 was not found",
                  "timestamp": 1721050063886
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/1.0/orders/{order_id}/refund": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Idempotency-Key"
        },
        {
          "$ref": "#/components/parameters/Order-Id"
        }
      ],
      "post": {
        "summary": "Refund an order (Deprecated)",
        "operationId": "refundOrderDeprecated",
        "description": "Issue a refund for a completed order. This operation allows for either a full or partial refund, which will be processed back to the customer's original payment method.\n\n## Operation details\n\n- The refund operation generates a new order with `type: REFUND`. This new order represents a full or partial refund of the original amount paid.\n- Refunds can only be initiated for orders that are in the `COMPLETED` state. Orders in any other state are not eligible for refunds to ensure transaction integrity and to prevent errors.\n\n:::note\n  - Ensure that the order to be refunded is confirmed as `COMPLETED` before attempting a refund operation.\n  - Consider using the `Idempotency-Key` header to make the refund operation idempotent, preventing duplicate refund processing in cases of multiple submissions.\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order-Refund"
              },
              "example": {
                "amount": 40,
                "description": "Refund for damaged goods"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "refund_example": {
                    "summary": "Refund example",
                    "value": {
                      "id": "6a1353a8-3054-40ee-ab39-97a11e4c5f2a",
                      "type": "REFUND",
                      "state": "COMPLETED",
                      "created_at": "2020-05-12T14:23:11.046526Z",
                      "updated_at": "2020-05-12T14:23:11.046526Z",
                      "completed_at": "2020-05-12T14:23:11.046526Z",
                      "order_amount": {
                        "value": 40,
                        "currency": "GBP"
                      },
                      "email": "customer@gmail.com",
                      "full_name": "Example Customer",
                      "related": [
                        {
                          "id": "4695b666-45d0-4f15-ad10-e66a84c914bf",
                          "type": "PAYMENT",
                          "amount": {
                            "value": 100,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Insufficient funds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut support for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    },
                    "code": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533,
                      "code": 1026
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{order_id}/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Order-Id"
        }
      ],
      "post": {
        "summary": "Pay for an order",
        "operationId": "payOrder",
        "description": "Initiate a payment to pay full amount for an order using a customer's saved payment method.\n\n:::note\nThe `/orders/{order_id}/confirm` endpoint has been deprecated. It will be only supported for already existing implementations.\n:::\n\n:::caution\nThis endpoint is part of a new API, pay attention to the different endpoint URL. \n:::\n\nFor more information about how to save and charge payment methods, see: [Charge a customer's saved payment method](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/charge-saved-payment-method).\n\nThe following table shows who can initiate payments on saved payment methods (`initiator` parameter), depending on if the payment method was saved for the customer or the merchant (`savedPaymentMethodFor` parameter):\n\n  |                           | `savePaymentMethodFor: customer` | `savePaymentMethodFor: merchant` |\n  | ------------------------- | -------------------------------- | -------------------------------- |\n  | **`initiator: customer`** | Allowed                          | Allowed                          |\n  | **`initiator: merchant`** | Not allowed                      | Allowed                          |\n\n\n:::note\nUsing this endpoint, only merchant initiated payments are supported with Revolut Pay.\n:::\n          \nFor more information about customers' payment methods, see the [Retrieve all payment methods of a customer](https://developer.revolut.com/docs/merchant/retrieve-all-payment-methods) operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Saved-Payment-Method"
              },
              "examples": {
                "saved_card_customer": {
                  "summary": "Saved card (customer initiator)",
                  "value": {
                    "saved_payment_method": {
                      "type": "card",
                      "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                      "initiator": "customer",
                      "environment": {
                        "type": "browser",
                        "time_zone_utc_offset": 180,
                        "color_depth": 48,
                        "screen_width": 1920,
                        "screen_height": 1080,
                        "java_enabled": true,
                        "challenge_window_width": 640,
                        "browser_url": "https://business.revolut.com"
                      }
                    }
                  }
                },
                "saved_card_merchant": {
                  "summary": "Saved card (merchant initiator)",
                  "value": {
                    "saved_payment_method": {
                      "type": "card",
                      "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                      "initiator": "merchant"
                    }
                  }
                },
                "revolut_pay": {
                  "summary": "Saved Revolut Pay (merchant initiator)",
                  "value": {
                    "saved_payment_method": {
                      "type": "revolut_pay",
                      "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                      "initiator": "merchant"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment-Retrieval"
                },
                "examples": {
                  "successful_payment_card": {
                    "summary": "Payment authorised (card)",
                    "value": {
                      "id": "63c55e04-4208-a43d-9c96-eaee848ffbaf",
                      "order_id": "63c55df6-1461-a886-b90f-f49d3c370253",
                      "payment_method": {
                        "type": "card",
                        "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                        "brand": "mastercard_credit",
                        "last_four": 1234
                      },
                      "state": "authorisation_passed"
                    }
                  },
                  "successful_payment_revolut_pay_account": {
                    "summary": "Payment authorised (Revolut Pay - Revolut account)",
                    "value": {
                      "id": "63c55e04-4208-a43d-9c96-eaee848ffbaf",
                      "order_id": "63c55df6-1461-a886-b90f-f49d3c370253",
                      "payment_method": {
                        "type": "revolut_pay",
                        "subtype": "revolut_account",
                        "id": "2b83c23a-650e-40c3-8989-00ee24478738"
                      },
                      "state": "authorisation_passed"
                    }
                  },
                  "successful_payment_revolut_pay_card": {
                    "summary": "Payment authorised (Revolut Pay - card)",
                    "value": {
                      "id": "63c55e04-4208-a43d-9c96-eaee848ffbaf",
                      "order_id": "63c55df6-1461-a886-b90f-f49d3c370253",
                      "payment_method": {
                        "type": "revolut_pay",
                        "subtype": "card",
                        "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                        "brand": "visa",
                        "last_four": 1234
                      },
                      "state": "authorisation_passed"
                    }
                  },
                  "three_ds": {
                    "summary": "Saved card payment (3DS challenge)",
                    "value": {
                      "id": "5e96b328-4054-41ed-b089-595ccc4d0870",
                      "order_id": "a16718e0-077a-4942-89bc-23ac17a2e14c",
                      "payment_method": {
                        "type": "card",
                        "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                        "brand": "mastercard_credit",
                        "last_four": 1234
                      },
                      "state": "authentication_challenge",
                      "authentication_challenge": {
                        "type": "three_ds",
                        "acs_url": "https://example.com"
                      }
                    }
                  },
                  "three_ds_fingerprint": {
                    "summary": "Saved card payment (3DS fingerprint challenge)",
                    "value": {
                      "id": "5e96b328-4054-41ed-b089-595ccc4d0870",
                      "order_id": "a16718e0-077a-4942-89bc-23ac17a2e14c",
                      "payment_method": {
                        "type": "card",
                        "id": "2b83c23a-650e-40c3-8989-00ee24478738",
                        "brand": "mastercard_credit",
                        "last_four": 1234
                      },
                      "state": "authentication_challenge",
                      "authentication_challenge": {
                        "type": "three_ds_fingerprint",
                        "fingerprint_url": "https://example.com",
                        "fingerprint_data": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    },
                    "code": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533,
                      "code": 1024
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders",
          "Payments"
        ]
      },
      "get": {
        "summary": "Retrieve payment list of an order",
        "operationId": "retrievePaymentList",
        "description": "Retrieve a list of payments for a specific order, based on the order's ID.\n\n:::note\nThis endpoint is part of a new API, pay attention to the different endpoint URL.\n:::\n\nUse this endpoint to retrieve payment details for saved payment methods to make merchant and customer initiated transactions. For more information, see: \n  - [Speed up customer checkout by using saved card details](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/checkout-with-saved-card)\n  - [Manage subscriptions](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/subscription-management)",
        "responses": {
          "200": {
            "description": "List of payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment-Retrieval"
                  }
                },
                "examples": {
                  "successful_and_failed_payment": {
                    "summary": "List of payments",
                    "value": [
                      {
                        "id": "63dd0e4a-42c4-a1a6-ab2c-6ac9d255ca4b",
                        "order_id": "63dd0e3f-7b84-ab5c-927c-1a06f7c9583a",
                        "state": "declined",
                        "payment_method": {
                          "type": "card",
                          "brand": "mastercard_credit",
                          "last_four": 1234
                        }
                      },
                      {
                        "id": "649adc44-3e86-a832-879c-2f6d0255dd4c",
                        "order_id": "63dd0e3f-7b84-ab5c-927c-1a06f7c9583a",
                        "state": "completed",
                        "payment_method": {
                          "type": "revolut_pay",
                          "subtype": "revolut_account",
                          "id": "649ae3de-aa8f-a9cb-8f15-2a88137d9f6d"
                        }
                      }
                    ]
                  },
                  "revolut_pay_saved": {
                    "summary": "Payment completed via Revolut Pay (saved details)",
                    "value": [
                      {
                        "id": "64905d4b-a205-aac3-a5ef-dab978b1b7ee",
                        "order_id": "64905d0f-3f95-a2ac-91ea-57c77f9dbe69",
                        "state": "completed",
                        "payment_method": {
                          "type": "revolut_pay",
                          "subtype": "revolut_account",
                          "id": "648334a8-9546-a983-a81a-efc6d5bdd0be"
                        }
                      }
                    ]
                  },
                  "card_payment_not_saved": {
                    "summary": "Payment completed via card (not saved details)",
                    "value": [
                      {
                        "id": "63dd0e4a-42c4-a1a6-ab2c-6ac9d255ca4b",
                        "order_id": "63dd0e3f-7b84-ab5c-927c-1a06f7c9583a",
                        "state": "completed",
                        "payment_method": {
                          "type": "card",
                          "brand": "visa",
                          "last_four": 1234
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "bad_request",
                  "message": "Could not parse JSON",
                  "timestamp": 1720528890647
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1720528890647
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2",
                  "example": {
                    "code": "not_found",
                    "message": "Order with id b8883ab5-964a-4329-aa44-4d3c76cf3f54 was not found",
                    "timestamp": 1720528890647
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Orders",
          "Payments"
        ]
      }
    },
    "/api/1.0/customers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create a customer",
        "operationId": "createCustomer",
        "description": "Create a `customer` that has the information in the body of the request.\n\n:::note\nIf you wish to save a customer's payment details using any of the available payment methods on the Revolut Checkout Widget ([Revolut Pay](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/introduction), [Card payments](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/card-payments/introduction)), you need to meet one of the following requirements:\n\n  - Have a customer object with `email` and assign it to the order by providing `customer.id`\n  - Create a new customer with, at least, `customer.email` during [order creation](https://developer.revolut.com/docs/merchant/create-order)\n\nFor more information, see: [Charge a customer's saved payment method](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/charge-saved-payment-method).\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer-Creation"
              },
              "example": {
                "full_name": "Example Customer",
                "business_name": "Example Business",
                "email": "example.customer@example.com",
                "phone": "+441234567890",
                "date_of_birth": "1990-01-01"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "created_customer": {
                    "summary": "Created customer",
                    "value": {
                      "id": "6c7c97a8-cfc1-4cf3-8b38-26a74fdf1fae",
                      "full_name": "Example Customer",
                      "business_name": "Example Business",
                      "email": "example.customer@example.com",
                      "phone": "+441234567890",
                      "date_of_birth": "1990-01-01",
                      "created_at": "2020-06-24T12:03:39.979397Z",
                      "updated_at": "2020-06-24T12:03:39.979397Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "number",
                      "description": "The date and time the error happened."
                    },
                    "code": {
                      "type": "number",
                      "description": "`1018` - The customer already exists."
                    }
                  },
                  "required": [
                    "errorId",
                    "timestamp"
                  ]
                },
                "examples": {
                  "Error": {
                    "value": {
                      "errorId": "5226f800-e9be-4b74-ae61-6c7b71c913b5",
                      "timestamp": 1593439990599,
                      "code": 1018
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Retrieve a customer list",
        "operationId": "retrieveAllCustomers",
        "description": "Get a list of all your `customers`.",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 100
            },
            "in": "query",
            "name": "limit",
            "description": "The maximum number of customers returned per page. Used for **pagination**."
          },
          {
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            },
            "in": "query",
            "name": "page",
            "description": "A zero-based page index for the paginated results, used in conjunction with `limit`."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                },
                "examples": {
                  "list_of_customers": {
                    "summary": "List of customers",
                    "value": [
                      {
                        "id": "9dfb8491-bfb0-4420-ad63-0fa7bdd3dffb",
                        "full_name": "First Customer",
                        "email": "first.customer@example.com",
                        "date_of_birth": "1990-01-01",
                        "created_at": "2020-06-24T12:12:56.596703Z",
                        "updated_at": "2020-06-24T12:12:56.737082Z"
                      },
                      {
                        "id": "6c7c97a8-cfc1-4cf3-8b38-26a74fdf1fae",
                        "full_name": "Second Customer",
                        "business_name": "Second Business",
                        "email": "second.customer@example.com",
                        "phone": "+441234567890",
                        "created_at": "2020-06-24T12:03:39.979397Z",
                        "updated_at": "2020-06-25T10:03:39.134417Z"
                      },
                      {
                        "id": "014f0ad6-c45b-4d7d-83c6-80eea94fceac",
                        "full_name": "Third Customer",
                        "email": "third.customer@example.com",
                        "phone": "+441234567890",
                        "created_at": "2020-06-23T14:13:08.262336Z",
                        "updated_at": "2020-06-24T10:47:11.173027Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/1.0/customers/{customer_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Customer-Id"
        }
      ],
      "get": {
        "summary": "Retrieve a customer",
        "operationId": "retrieveCustomer",
        "description": "Get the information about a specific `customer`, based on its ID.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-With-Payment-Method"
                },
                "examples": {
                  "retrieved_customer": {
                    "summary": "Retrieved customer",
                    "value": {
                      "id": "6c7c97a8-cfc1-4cf3-8b38-26a74fdf1fae",
                      "full_name": "Example Customer",
                      "business_name": "Example Business",
                      "email": "example.customer@example.com",
                      "phone": "+441234567890",
                      "date_of_birth": "1990-01-01",
                      "created_at": "2020-06-24T12:03:39.979397Z",
                      "updated_at": "2020-06-25T10:03:39.134417Z",
                      "payment_methods": [
                        {
                          "id": "648334a8-9546-a983-a81a-efc6d5bdd0be",
                          "type": "REVOLUT_PAY",
                          "saved_for": "MERCHANT",
                          "method_details": {
                            "created_at": "2023-06-09T14:18:16.577888Z"
                          }
                        },
                        {
                          "id": "edef3ba4-60a0-4df3-8f12-e5fc858c2420",
                          "type": "CARD",
                          "saved_for": "CUSTOMER",
                          "method_details": {
                            "bin": "459765",
                            "last4": "6578",
                            "expiry_month": 2,
                            "expiry_year": 2025,
                            "cardholder_name": "Example Customer",
                            "brand": "VISA",
                            "funding": "DEBIT",
                            "issuer": "EXAMPLE ISSUER",
                            "issuer_country": "GB",
                            "billing_address": {
                              "street_line_1": "7, Westferry Circus",
                              "street_line_2": "Columbus Building",
                              "post_code": "E144HD",
                              "city": "London",
                              "region": "Greater London",
                              "country_code": "GB"
                            },
                            "created_at": "2023-03-24T14:15:22Z"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "patch": {
        "summary": "Update a customer",
        "operationId": "updateCustomer",
        "description": "Update the attributes of a specific `customer`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer-Update"
              },
              "example": {
                "email": "example.business@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "updated_customer": {
                    "summary": "Updated customer",
                    "value": {
                      "id": "6c7c97a8-cfc1-4cf3-8b38-26a74fdf1fae",
                      "full_name": "Example Customer",
                      "business_name": "Example Business",
                      "email": "example.business@example.com",
                      "phone": "+441234567890",
                      "date_of_birth": "1990-01-01",
                      "created_at": "2020-06-24T12:03:39.979397Z",
                      "updated_at": "2020-06-25T10:03:39.134417Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomer",
        "description": "Delete the profile of a specific `customer`.",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/1.0/customers/{customer_id}/payment-methods": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Customer-Id"
        }
      ],
      "get": {
        "summary": "Retrieve all payment methods of a customer",
        "operationId": "retrieveAllPaymentMethods",
        "description": "Retrieve all the payment methods for a specific customer. \n\nThis can be useful in the following example cases:\n\n- To show what information is stored for the customer.\n- To try a different payment method if the first payment method fails when a recurring transaction occurs.",
        "parameters": [
          {
            "name": "only_merchant",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If `only_merchant` is set to `true`, you retrieve the payment methods\nthat were saved for the merchant (`saved_for: \"MERCHANT\"`).\n\nTo use this parameter insert it at the end of the request URL. See this example for a request URL in Production environment: \n\n  ```curl\n  https://merchant.revolut.com/api/1.0/customers/{customer_id}/payment-methods?only_merchant=true\n  ``` ",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer-Payment-Method"
                  }
                },
                "examples": {
                  "list_of_payment_methods": {
                    "summary": "List of payment methods",
                    "value": [
                      {
                        "id": "648334a8-9546-a983-a81a-efc6d5bdd0be",
                        "type": "REVOLUT_PAY",
                        "saved_for": "MERCHANT",
                        "method_details": {
                          "created_at": "2023-06-09T14:18:16.577888Z"
                        }
                      },
                      {
                        "id": "edef3ba4-60a0-4df3-8f12-e5fc858c2420",
                        "type": "CARD",
                        "saved_for": "CUSTOMER",
                        "method_details": {
                          "bin": "459678",
                          "last4": "6896",
                          "expiry_month": 3,
                          "expiry_year": 2025,
                          "cardholder_name": "Example Customer",
                          "brand": "VISA",
                          "funding": "DEBIT",
                          "issuer": "EXAMPLE ISSUER",
                          "issuer_country": "GB",
                          "billing_address": {
                            "street_line_1": "7",
                            "street_line_2": "Westferry Circus",
                            "post_code": "E144HD",
                            "city": "London",
                            "region": "Greater London",
                            "country_code": "GB"
                          },
                          "created_at": "2023-03-24T14:15:22Z"
                        }
                      },
                      {
                        "id": "a04406c4-05be-498b-8207-cc1e02a9b3ca",
                        "type": "CARD",
                        "saved_for": "MERCHANT",
                        "method_details": {
                          "bin": "459885",
                          "last4": "7653",
                          "expiry_month": 12,
                          "expiry_year": 2021,
                          "cardholder_name": "Example Holder",
                          "brand": "MASTERCARD",
                          "funding": "CREDIT",
                          "issuer": "EXAMPLE ISSUER",
                          "issuer_country": "GB",
                          "billing_address": {
                            "street_line_1": "Revolut",
                            "street_line_2": "1 Canada Square",
                            "post_code": "EC2V 6DN",
                            "city": "London",
                            "region": "Greater London",
                            "country_code": "GB"
                          },
                          "created_at": "2023-03-24T14:15:22Z"
                        }
                      }
                    ]
                  },
                  "list_of_only_merchant_payment_methods": {
                    "summary": "List of payment methods (only_merchant=true)",
                    "value": [
                      {
                        "id": "624baa72-0a30-4ee3-9870-d7172912704c",
                        "type": "CARD",
                        "saved_for": "MERCHANT",
                        "method_details": {
                          "bin": "492942",
                          "last4": "5709",
                          "expiry_month": 12,
                          "expiry_year": 2025,
                          "cardholder_name": "Example Customer",
                          "billing_address": {
                            "street_line_1": "7",
                            "street_line_2": "Westferry Circus",
                            "post_code": "E144HD",
                            "city": "London",
                            "region": "Greater London",
                            "country_code": "GB"
                          },
                          "created_at": "2023-03-24T14:15:22Z"
                        }
                      },
                      {
                        "id": "b92b7413-8764-4f8e-855d-d9b6986af2d9",
                        "type": "CARD",
                        "saved_for": "MERCHANT",
                        "method_details": {
                          "bin": "528143",
                          "last4": "7653",
                          "expiry_month": 12,
                          "expiry_year": 2025,
                          "cardholder_name": "Example Holder",
                          "billing_address": {
                            "street_line_1": "Revolut",
                            "street_line_2": "1 Canada Square",
                            "post_code": "EC2V 6DN",
                            "city": "London",
                            "region": "Greater London",
                            "country_code": "GB"
                          },
                          "created_at": "2023-03-24T14:15:22Z"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/1.0/customers/{customer_id}/payment-methods/{payment_method_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Customer-Id"
        },
        {
          "$ref": "#/components/parameters/Payment-Method-Id"
        }
      ],
      "get": {
        "summary": "Retrieve a customer's payment method",
        "operationId": "retrievePaymentMethod",
        "description": "Retrieve the information of a specific payment method that is saved.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Payment-Method"
                },
                "examples": {
                  "retrieved_payment_method": {
                    "summary": "Retrieved payment method",
                    "value": {
                      "id": "edef3ba4-60a0-4df3-8f12-e5fc858c2420",
                      "type": "CARD",
                      "saved_for": "CUSTOMER",
                      "method_details": {
                        "bin": "459678",
                        "last4": "6896",
                        "expiry_month": 3,
                        "expiry_year": 2025,
                        "cardholder_name": "Example Customer",
                        "brand": "VISA",
                        "funding": "DEBIT",
                        "issuer": "EXAMPLE ISSUER",
                        "issuer_country": "GB",
                        "billing_address": {
                          "street_line_1": "7",
                          "street_line_2": "Westferry Circus",
                          "post_code": "E144HD",
                          "city": "London",
                          "region": "Greater London",
                          "country_code": "GB"
                        },
                        "created_at": "2023-03-24T14:15:22Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "patch": {
        "summary": "Update a customer's payment method",
        "operationId": "updatePaymentMethod",
        "description": "When you use this request to update a customer's payment method, the payment method can't be used for merchant initiated transactions (MIT) any more. This payment method can be used only when the customer is on the checkout page.\n\n\nFor more information about the limitations introduced by this parameter, see: \n  - [Pay for an order](https://developer.revolut.com/docs/merchant/pay-order)\n  - [Charge a customer's saved payment method](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/charge-saved-payment-method)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "saved_for": {
                    "type": "string",
                    "description": "Update the value of `saved_for` from `MERCHANT` to `CUSTOMER`.\n\nThis indicates that the updated payment method can't be used for merchant initiated transactions (MIT) any more.",
                    "enum": [
                      "CUSTOMER"
                    ]
                  }
                },
                "required": [
                  "saved_for"
                ]
              },
              "examples": {
                "example_request": {
                  "summary": "Example request",
                  "value": {
                    "saved_for": "CUSTOMER"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Payment-Method"
                },
                "examples": {
                  "updated_payment_method": {
                    "summary": "Updated payment method",
                    "value": {
                      "id": "edef3ba4-60a0-4df3-8f12-e5fc858c2420",
                      "type": "CARD",
                      "saved_for": "CUSTOMER",
                      "method_details": {
                        "bin": "459678",
                        "last4": "6896",
                        "expiry_month": 3,
                        "expiry_year": 2025,
                        "cardholder_name": "John Doe",
                        "brand": "VISA",
                        "funding": "DEBIT",
                        "issuer": "EXAMPLE ISSUER",
                        "issuer_country": "GB",
                        "billing_address": {
                          "street_line_1": "7",
                          "street_line_2": "Westferry Circus",
                          "post_code": "E144HD",
                          "city": "London",
                          "region": "Greater London",
                          "country_code": "GB"
                        },
                        "created_at": "2023-03-24T14:15:22Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer's payment method",
        "operationId": "deletePaymentMethod",
        "description": "Delete a specific payment method. The payment method is completely deleted from the customer payment methods. \n\nTo reuse the payment method that is deleted, direct your customer to the checkout page and save the card details again.",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/payments/{payment_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Payment-Id"
        }
      ],
      "get": {
        "summary": "Retrieve payment details",
        "operationId": "retrievePaymentDetails",
        "description": "Retrieve information about a specific payment, based on the payment's ID.\n\nUse this endpoint to track a payment's lifecycle, for example:\n  - When you develop a [1-click checkout process](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/checkout-with-saved-card)\n  - When you build a [subscription management system](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/subscription-management)",
        "responses": {
          "200": {
            "description": "Payment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment-Retrieval"
                },
                "examples": {
                  "revolut_pay_saved": {
                    "summary": "Payment completed via Revolut Pay (saved details)",
                    "value": {
                      "id": "64905d4b-a205-aac3-a5ef-dab978b1b7ee",
                      "order_id": "64905d0f-3f95-a2ac-91ea-57c77f9dbe69",
                      "state": "completed",
                      "payment_method": {
                        "type": "revolut_pay",
                        "subtype": "revolut_account",
                        "id": "648334a8-9546-a983-a81a-efc6d5bdd0be"
                      }
                    }
                  },
                  "revolut_pay_not_saved": {
                    "summary": "Payment completed via Revolut Pay (not saved details)",
                    "value": {
                      "id": "64905d4b-a205-aac3-a5ef-dab978b1b7ee",
                      "order_id": "64905d0f-3f95-a2ac-91ea-57c77f9dbe69",
                      "state": "completed",
                      "payment_method": {
                        "type": "revolut_pay",
                        "subtype": "revolut_account"
                      }
                    }
                  },
                  "card_payment_saved": {
                    "summary": "Payment completed via card (saved details)",
                    "value": {
                      "id": "63dd0e4a-42c4-a1a6-ab2c-6ac9d255ca4b",
                      "order_id": "63dd0e3f-7b84-ab5c-927c-1a06f7c9583a",
                      "state": "completed",
                      "payment_method": {
                        "type": "card",
                        "brand": "visa",
                        "last_four": 1234,
                        "id": "64a28499-05c5-af30-bbf9-9c1b028e00b8"
                      }
                    }
                  },
                  "card_payment_not_saved": {
                    "summary": "Payment completed via card (not saved details)",
                    "value": {
                      "id": "63dd0e4a-42c4-a1a6-ab2c-6ac9d255ca4b",
                      "order_id": "63dd0e3f-7b84-ab5c-927c-1a06f7c9583a",
                      "state": "completed",
                      "payment_method": {
                        "type": "card",
                        "brand": "visa",
                        "last_four": 1234
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorId": {
                      "type": "string",
                      "description": "The ID of the error. You can share this ID with Revolut\nsupport for troubleshooting."
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "The date and time the error happened."
                    },
                    "code": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorId": "94b27660-fdda-49ec-8b85-cd46a068ade0",
                      "timestamp": 1601296792533,
                      "code": 1024
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/api/payouts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version"
        }
      ],
      "get": {
        "summary": "Retrieve a payout list",
        "operationId": "retrievePayoutList",
        "description": "Retrieve all the payouts you made from your Merchant account. You can also use the query parameters for:\n\n  | Filtering | Pagination |\n  | --------- | ---------- |\n  | Filter the orders that you want to retrieve, for example, only retrieve the orders that have a specific email. <br/><br/>Parameters used for filtering:<br/><ul><li>`from_created_date`</li><li>`to_created_date`</li><li>`currency`</li><li>`state`</li></ul> | View the orders without loading all of them at once, for example, return a specified number of orders per page. <br/><br/>Parameters used for pagination: <br/><ul><li>`limit`</li></ul> |",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "description": "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            },
            "description": "The maximum number of payouts returned per page. Used for **pagination**."
          },
          {
            "name": "from_created_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Retrieve all payouts with a `created_date` ≥ `from_created_date`. Used for **filtering**.\n\nUse the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss[.SSSSSS]Z`. For example, `2021-02-10T16:59:50.886826Z`."
          },
          {
            "name": "to_created_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Retrieve all payouts with a `created_date` ≤ `to_created_date`. Used for **filtering**.\n\nUse the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601): `yyyy-MM-ddTHH:mm:ss[.SSSSSS]Z`. For example, `2021-02-10T16:59:50.886826Z`."
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "processing",
                  "completed",
                  "failed"
                ]
              }
            },
            "style": "form",
            "explode": true,
            "description": "Retrieve all payouts with specific states. You can pass several states. Used for **filtering**.\n\nIf multiple states are selected, for example `completed` and `processing`, payouts with either of the selected values are returned. See this example of such a request URL: \n\n```curl\nhttps://merchant.revolut.com/api/payouts?state=completed&state=processing\n```\n\nThe parameter is case sensitive."
          }
        ],
        "responses": {
          "201": {
            "description": "Payouts retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payout"
                  }
                },
                "example": [
                  {
                    "id": "a830020e-090c-4717-836d-37941a27ad12",
                    "state": "completed",
                    "created_at": "2024-02-27T00:16:39.079285Z",
                    "destination_type": "current_pocket",
                    "amount": 50000,
                    "currency": "GBP"
                  },
                  {
                    "id": "66ffee42-7c4a-a15c-9a47-5dc67150386f",
                    "state": "processing",
                    "created_at": "2024-02-26T17:16:39.079285Z",
                    "destination_type": "external_beneficiary",
                    "amount": 10000,
                    "currency": "GBP"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "bad_request",
                  "message": "Could not parse JSON",
                  "timestamp": 1721049596461
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Payouts"
        ]
      }
    },
    "/api/payouts/{payout_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version"
        },
        {
          "$ref": "#/components/parameters/Payout-Id"
        }
      ],
      "get": {
        "summary": "Retrieve a payout",
        "operationId": "retrievePayout",
        "description": "Retrieve the details of a payout. Provide the unique payout ID, and the corresponding payout information is returned.",
        "responses": {
          "200": {
            "description": "Payout retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                },
                "example": {
                  "id": "a830020e-090c-4717-836d-37941a27ad12",
                  "state": "completed",
                  "created_at": "2024-02-27T00:16:39.079285Z",
                  "destination_type": "current_pocket",
                  "amount": 50000,
                  "currency": "GBP"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "bad_request",
                  "message": "Missing Revolut-Api-Version header",
                  "timestamp": 1721049596461
                }
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "unauthenticated",
                  "message": "Authentication failed",
                  "timestamp": 1721049596461
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error-v2"
                },
                "example": {
                  "code": "not_found",
                  "message": "The requested resource is not found",
                  "timestamp": 1721050063886
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Payouts"
        ]
      }
    },
    "/api/report-runs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create a new report run",
        "operationId": "createReportRun",
        "description": "Start generating a new report of the relevant transactions, and receive `report_run_id`. \n\nAfter generation is done, use the link in `file_url` to download the report. Use the [Retrieve report run details](https://developer.revolut.com/docs/merchant/retrieve-report-run-details) operation to check the status of the report run.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "settlement_report": "#/components/schemas/Report-Run-Settlement-Report",
                    "custom_report": "#/components/schemas/Report-Run-Custom-Report",
                    "payout_statement_report": "#/components/schemas/Report-Run-Payout-Report",
                    "icpp_fee_breakdown_report": "#/components/schemas/Report-Run-Icpp-Report"
                  }
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Report-Run-Settlement-Report"
                  },
                  {
                    "$ref": "#/components/schemas/Report-Run-Custom-Report"
                  },
                  {
                    "$ref": "#/components/schemas/Report-Run-Payout-Report"
                  },
                  {
                    "$ref": "#/components/schemas/Report-Run-Icpp-Report"
                  }
                ]
              },
              "examples": {
                "custom_report": {
                  "summary": "Custom report",
                  "value": {
                    "filter": {
                      "from": "2020-01-01T00:00:00Z",
                      "to": "2020-01-02T00:00:00Z",
                      "entity_types": [
                        "payment"
                      ],
                      "entity_states": [
                        "completed",
                        "processing"
                      ]
                    },
                    "format": "csv",
                    "type": "custom_report",
                    "options": {
                      "timezone": "Europe/London",
                      "columns": [
                        "transaction_id",
                        "amount",
                        "currency",
                        "metadata.custom_attribute"
                      ]
                    }
                  }
                },
                "settlement_report": {
                  "summary": "Settlement report",
                  "value": {
                    "filter": {
                      "from": "2020-01-01T00:00:00Z",
                      "to": "2020-01-02T00:00:00Z",
                      "entity_types": [
                        "payment"
                      ],
                      "entity_states": [
                        "failed"
                      ]
                    },
                    "format": "csv",
                    "type": "settlement_report"
                  }
                },
                "payout_statement_report": {
                  "summary": "Payout statement report",
                  "value": {
                    "filter": {
                      "payout_id": "a830020e-090c-4717-836d-37941a27ad12"
                    },
                    "format": "csv",
                    "type": "payout_statement_report"
                  }
                },
                "icpp_fee_breakdown_report": {
                  "summary": "IC++ fee breakdown report",
                  "value": {
                    "filter": {
                      "icpp_charge_id": "41d6c699-744a-4994-91c0-9227539c587f"
                    },
                    "format": "csv",
                    "type": "icpp_fee_breakdown_report"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report run created, report started generating",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Details"
                },
                "examples": {
                  "report_run_processing": {
                    "summary": "Report run processing",
                    "value": {
                      "report_run_id": "d6f6ef64-f668-4e64-8967-1cdf8afb2561",
                      "status": "processing"
                    }
                  },
                  "report_run_completed": {
                    "summary": "Report run completed",
                    "value": {
                      "report_run_id": "d6f6ef64-f668-4e64-8967-1cdf8afb2561",
                      "status": "completed",
                      "file_url": "https://merchant.revolut.com/api/report-runs/d6f6ef64-f668-4e64-8967-1cdf8afb2561/file"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Report runs"
        ]
      }
    },
    "/api/report-runs/{report_run_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Report-Run-Id"
        }
      ],
      "get": {
        "summary": "Retrieve report run details",
        "operationId": "retrieveReportRunDetails",
        "description": "Retrieve details of a report run, based on the `report_run_id`. \n\nUse this method to check the status of a report run.\n\nIf a report run's `status` is `completed`, the report file can be downloaded using the `file_url`.",
        "responses": {
          "200": {
            "description": "Report run found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Details"
                },
                "examples": {
                  "report_run_processing": {
                    "summary": "Report run processing",
                    "value": {
                      "report_run_id": "d6f6ef64-f668-4e64-8967-1cdf8afb2561",
                      "status": "processing"
                    }
                  },
                  "report_run_completed": {
                    "summary": "Report run completed",
                    "value": {
                      "report_run_id": "d6f6ef64-f668-4e64-8967-1cdf8afb2561",
                      "status": "completed",
                      "file_url": "https://merchant.revolut.com/api/report-runs/d6f6ef64-f668-4e64-8967-1cdf8afb2561/file"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Report runs"
        ]
      }
    },
    "/api/report-runs/{report_run_id}/file": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Report-Run-Id"
        }
      ],
      "get": {
        "summary": "Download report file",
        "operationId": "downloadReportFile",
        "description": "Use this endpoint to download the generated report file.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "description": "CSV-formatted text representing the generated report file."
                },
                "examples": {
                  "custom-report": {
                    "summary": "Custom CSV report example",
                    "value": "transaction_id,order_id,payment_method,amount,currency,state,updated_date\n\n649ae37f-99ca-a7db-a4fb-5924af14ad7c,649ae35c-2558-adea-bf98-3a7156a764e7,PAY_WITH_REVOLUT,0.05,GBP,COMPLETED,2023-06-28T13:30:46.07498Z\n\n649ae3de-e945-af9f-98c8-1d6172e350b5,649ae3ab-3998-ab2b-ad95-41b48346be69,PAY_WITH_REVOLUT,0.05,GBP,COMPLETED,2023-06-28T13:30:46.075569Z\n\n649ae48b-37f6-a097-9cb0-4fc2a89d9e5a,649ae479-d7e8-a139-993b-bf75865c5059,PAY_WITH_REVOLUT,0.05,GBP,COMPLETED,2023-06-28T13:38:46.084289Z\n\n649af325-0695-ac77-8868-ab421510a964,649af29d-be4a-a854-b872-3ececa585e0a,PAY_WITH_REVOLUT,0.05,GBP,COMPLETED,2023-06-28T14:34:56.894573Z\n\n649af3a5-efbd-af7e-8c95-022bbdb91f1b,649af383-670d-a390-b22c-799a00892645,PAY_WITH_REVOLUT,0.05,GBP,COMPLETED,2023-06-28T14:42:56.903122Z\n\n649ab540-352a-ac19-866f-47189c00d1a2,649ab53e-53ba-a398-88e1-78cf5bd9d348,PAY_WITH_REVOLUT,0.50,GBP,COMPLETED,2023-06-28T10:14:18.000566Z"
                  },
                  "payout_statement_report": {
                    "summary": "Payout statement CSV report example",
                    "value": "created_date,completed_date,payout_affected_date,affected_payout_amount,transaction_id,order_id,merchant_order_reference,type,related_payout_id,related_icpp_charge_id,transaction_amount,transaction_currency,billing_amount,billing_currency,state,original_transaction_id,original_transaction_amount,original_transaction_currency,original_order_id,original_merchant_order_reference,fee_amount,fee_currency,settlement_amount,settlement_currency\n\n2024-04-10T17:34:15.928757Z,2024-04-11T17:35:03.281106Z,2024-04-11T17:35:03.281106Z,true,6616cd97-3d8a-a1df-99c6-1417fc9e1997,6616cd60-ba44-a55a-81f3-91b4edb2a5c1,,Payment,,,10000.00,GBP,10000.00,GBP,COMPLETED,6616cd97-3d8a-a1df-99c6-1417fc9e1997,10000.00,GBP,6616cd60-ba44-a55a-81f3-91b4edb2a5c1,,-100.00,GBP,9900.00,GBP\n\n2024-04-10T17:38:08.94564Z,2024-04-11T17:38:58.500128Z,2024-04-11T17:38:58.500128Z,true,6616ce80-2cee-a314-b494-b3ff64d77e14,6616cdbf-5674-a095-bbc9-4349ea767dd1,,Payment,,,10000.00,GBP,10000.00,GBP,COMPLETED,6616ce80-2cee-a314-b494-b3ff64d77e14,10000.00,GBP,6616cdbf-5674-a095-bbc9-4349ea767dd1,,-100.00,GBP,9900.00,GBP\n\n2024-04-10T17:42:23.260097Z,2024-04-11T17:42:58.497249Z,2024-04-11T17:42:58.497249Z,true,6616cf7f-aa77-a577-9051-fe526e109b82,6616cf1b-dfa8-aeac-b736-36e851d83376,,Payment,,,10000.00,GBP,10000.00,GBP,COMPLETED,6616cf7f-aa77-a577-9051-fe526e109b82,10000.00,GBP,6616cf1b-dfa8-aeac-b736-36e851d83376,,-100.00,GBP,9900.00,GBP"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report-Run-Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Report runs"
        ]
      }
    },
    "/api/1.0/webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create a webhook",
        "operationId": "createWebhook",
        "description": "Set up a webhook URL so that the Merchant API can push event notifications to the specified URL.\n\n:::caution\nMerchants can register a **maximum of 10 webhook URLs**. If you attempt to register more than 10, the API will return a `422 - Unprocessable Content` error. \n\nEnsure your webhook registrations are necessary and within the allowed limit.\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook-Creation"
              },
              "examples": {
                "example_webhook_request": {
                  "summary": "Example webhook request",
                  "value": {
                    "url": "https://example.com/webhooks",
                    "events": [
                      "ORDER_COMPLETED",
                      "ORDER_AUTHORISED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook-With-Signing-Secret"
                },
                "examples": {
                  "created_webhook": {
                    "summary": "Created webhook",
                    "value": {
                      "id": "c6b981f4-53b3-47d5-9b24-4f87af1160eb",
                      "url": "https://example.com/webhooks",
                      "events": [
                        "ORDER_AUTHORISED",
                        "ORDER_COMPLETED"
                      ],
                      "signing_secret": "wsk_4jETWMz1g1b37gCONjNp84t2KSSIT7dK"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "callbacks": {
          "Send webhook event": {
            "$ref": "#/components/callbacks/Webhook-Event"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      },
      "get": {
        "summary": "Retrieve a webhook list",
        "operationId": "retrieveAllWebhooks",
        "description": "Get a list of webhooks that you are currently subscribed to.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                },
                "examples": {
                  "list_of_webhooks": {
                    "summary": "List of webhooks",
                    "value": [
                      {
                        "id": "6fc8db62-6489-4470-a9e0-84b462fe3908",
                        "url": "https://revolut.com/webhooks",
                        "events": [
                          "ORDER_COMPLETED"
                        ]
                      },
                      {
                        "id": "b466ab77-4932-4850-beb0-113bfc1166f8",
                        "url": "https://business.revolut.com/webhooks",
                        "events": [
                          "ORDER_COMPLETED",
                          "ORDER_AUTHORISED"
                        ]
                      },
                      {
                        "id": "4a31c8a3-8037-4260-a09e-090475d37025",
                        "url": "https://developer.revolut.com/webhooks",
                        "events": [
                          "ORDER_AUTHORISED"
                        ]
                      },
                      {
                        "id": "5d815041-5753-46bc-aebc-315fe99f30aa",
                        "url": "https://example.com/webhooks",
                        "events": [
                          "ORDER_COMPLETED",
                          "ORDER_AUTHORISED"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/1.0/webhooks/{webhook_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Webhook-Id"
        }
      ],
      "get": {
        "summary": "Retrieve a webhook",
        "operationId": "retrieveWebhook",
        "description": "Get the details of a specific webhook.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook-With-Signing-Secret"
                },
                "examples": {
                  "retrieved_webhook": {
                    "summary": "Retrieved webhook",
                    "value": {
                      "id": "c6b981f4-53b3-47d5-9b24-4f87af1160eb",
                      "url": "https://example.com/webhooks",
                      "events": [
                        "ORDER_AUTHORISED",
                        "ORDER_COMPLETED"
                      ],
                      "signing_secret": "wsk_4jETWMz1g1b37gCONjNp84t2KSSIT7dK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      },
      "put": {
        "summary": "Update a webhook",
        "operationId": "updateWebhook",
        "description": "Update the details of a specific webhook.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook-Creation"
              },
              "examples": {
                "webhook_update_request": {
                  "summary": "Webhook update request",
                  "value": {
                    "url": "http://business.revolut.com",
                    "events": [
                      "ORDER_COMPLETED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "examples": {
                  "updated_webhook": {
                    "summary": "Updated webhook",
                    "value": {
                      "id": "c6b981f4-53b3-47d5-9b24-4f87af1160eb",
                      "url": "http://business.revolut.com",
                      "events": [
                        "ORDER_COMPLETED"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "summary": "Delete a webhook",
        "operationId": "deleteWebhook",
        "description": "Delete a webhook so that events are not sent to the specified URL any more.",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/1.0/webhooks/{webhook_id}/rotate-signing-secret": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Webhook-Id"
        }
      ],
      "post": {
        "summary": "Rotate a webhook signing secret",
        "operationId": "rotateWebhookSigningSecret",
        "description": "Rotate the `signing secret` for a specific webhook.\n\nFor more information, see [Tutorials: Verify the payload signature](https://developer.revolut.com/docs/guides/accept-payments/tutorials/work-with-webhooks/verify-the-payload-signature).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expiration_period": {
                    "type": "string",
                    "format": "duration",
                    "description": "The expiration period of the signing secret in the [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601#Durations). \n\nIf defined, when the signing secret is rotated, it continues to be valid until the expiration period passes.\n\nOtherwise, it is invalidated immediately.\n\nMaximum expiration period is 7 days.",
                    "maximum": "P7D",
                    "example": "PT5H30M"
                  }
                }
              },
              "examples": {
                "webhook_signing_secret_rotate_request": {
                  "summary": "Webhook signing secret rotation request",
                  "value": {
                    "expiration_period": "PT5H30M"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook-With-Signing-Secret"
                },
                "examples": {
                  "updated_webhook": {
                    "summary": "Updated webhook",
                    "value": {
                      "id": "c6b981f4-53b3-47d5-9b24-4f87af1160eb",
                      "url": "http://business.revolut.com",
                      "events": [
                        "ORDER_COMPLETED"
                      ],
                      "signing_secret": "wsk_4jETWMz1g1b37gCONjNp84t2KSSIT6aG"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/apple-pay/domains/register": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Register domain for Apple Pay",
        "operationId": "registerDomainApplePay",
        "description": "Register your website's domain to accept payments via Apple Pay. \n\nBefore you call this endpoint, make sure that you have completed the following steps:\n\n1. Download the latest [domain validation file](https://assets.revolut.com/api-docs/merchant-api/files/apple-developer-merchantid-domain-association).\n1. Upload the domain validation file to your website in the following folder `/.well-known/`. For example, if your website is `example.com`, the file should be available on `example.com/.well-known/apple-developer-merchantid-domain-association`, where `apple-developer-merchantid-domain-association` indicates the name of the file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain name of your website without the scheme (i.e. without `http://` or `https://`).",
                    "example": "revolut.com"
                  }
                },
                "required": [
                  "domain"
                ]
              },
              "examples": {
                "example_request": {
                  "summary": "Example domain registration request for Apple Pay",
                  "value": {
                    "domain": "revolut.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Domain registered successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "An identifier that can be used to determine what went wrong.\n\nError codes are not globally unique, but uniqueness is guaranteed within endpoints."
                    },
                    "message": {
                      "type": "string",
                      "description": "Human readable text describing what went wrong."
                    }
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "error_message": {
                    "summary": "Error message",
                    "value": {
                      "code": "validation",
                      "message": "Exactly one value must be supplied for client_id"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Apple Pay merchant registration"
        ]
      }
    },
    "/api/apple-pay/domains/unregister": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Revolut-Api-Version-Optional"
        }
      ],
      "post": {
        "summary": "Unregister domain for Apple Pay",
        "operationId": "unregisterDomainApplePay",
        "description": "Unregister your website from Apple Pay's registered domains. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain name of your website without the scheme (i.e. without `http://` or `https://`).",
                    "example": "revolut.com"
                  },
                  "reason": {
                    "type": "string",
                    "description": "A short explanation why you remove the domain.",
                    "maxLength": 1024
                  }
                },
                "required": [
                  "domain",
                  "reason"
                ]
              },
              "examples": {
                "example_request": {
                  "summary": "Example domain registration request for Apple Pay",
                  "value": {
                    "domain": "revolut.com",
                    "reason": "Unregister due to domain change."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Domain ungistered successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "An identifier that can be used to determine what went wrong.\n\nError codes are not globally unique, but uniqueness is guaranteed within endpoints."
                    },
                    "message": {
                      "type": "string",
                      "description": "Human readable text describing what went wrong."
                    }
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "error_message": {
                    "summary": "Error message",
                    "value": {
                      "code": "validation",
                      "message": "Exactly one value must be supplied for client_id"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Apple Pay merchant registration"
        ]
      }
    },
    "/api/synchronous-webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Register address validation endpoint for Fast checkout",
        "operationId": "registerAddressValidationEndpoint",
        "description": "Use this endpoint to register a URL where Revolut can send shipping address(es) from a Revolut Pay customer for validation during the [Fast checkout\nprocess](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout).\n\nRevolut Pay can support Fast checkout for delivering goods. Once your customer selects a shipping address, Revolut needs to validate if the merchant (or their shipping partner) delivers to the address provided. This is done by contacting the merchant's backend and asking for such validation and information.\n\nIn order for your backend to support Fast checkout, you need to:\n\n1. Register an URL to handle address validation\n1. Validate the shipping address sent to your backend\n1. Respond with a JSON object containing the result of the validation\n\nAdditionally, Revolut Pay can support multiple webhooks if you have multiple stores. For more information, see:\n  - [Manage multiple stores with Fast checkout](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout#manage-multiple-stores-with-fast-checkout)\n  - [Merchant API: Locations](https://developer.revolut.com/docs/merchant/locations)\n\n:::note\nTo set up a webhook for tracking order completion, failure, error, etc. events, use the [Webhooks endpoints](https://developer.revolut.com/docs/merchant/webhooks).\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Synchronous-Webhook-Creation"
              },
              "examples": {
                "create_webhook": {
                  "summary": "Create synchronous webhook",
                  "value": {
                    "event_type": "fast_checkout.validate_address",
                    "url": "https://backend.example.com/webhooks/validate-address"
                  }
                },
                "create_webhook_with_location_id": {
                  "summary": "Create synchronous webhook with location ID",
                  "value": {
                    "event_type": "fast_checkout.validate_address",
                    "url": "https://backend.example.com/webhooks/validate-address",
                    "location_id": "8d9a7125-805f-40f3-a405-bc89765db996"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Synchronous-Webhook"
                },
                "examples": {
                  "example_without_location": {
                    "summary": "Synchronous webhook response",
                    "value": {
                      "id": "f6abc4df-eb48-417c-8e75-f7c6d7ad394f",
                      "signing_key": "swsk_y5z3LEHYZ9ndote3qegzWD6uL4t1lfp1",
                      "url": "https://backend.example.com/webhooks/validate-address",
                      "event_type": "fast_checkout.validate_address"
                    }
                  },
                  "example_with_location": {
                    "summary": "Synchronous webhook response with location ID",
                    "value": {
                      "id": "f6abc4df-eb48-417c-8e75-f7c6d7ad394f",
                      "signing_key": "swsk_y5z3LEHYZ9ndote3qegzWD6uL4t1lfp1",
                      "url": "https://backend.example.com/webhooks/validate-address",
                      "event_type": "fast_checkout.validate_address",
                      "location_id": "b0ebede4-5cbc-4951-977f-70329faa8769"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Other"
        ]
      },
      "get": {
        "summary": "Retrieve a synchronous webhook list",
        "operationId": "retrieveSynchronousWebhookList",
        "description": "Retrieve a list of synchronous webhook objects.\n\nYou can use this endpoint to see your different address validation endpoints registered to different locations.\n\n:::info\nFor more information about locations, see: [Merchant API: Locations](https://developer.revolut.com/docs/merchant/locations).\n:::",
        "responses": {
          "200": {
            "description": "Synchronous webhook list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Synchronous-Webhook"
                  }
                },
                "examples": {
                  "example_without_location": {
                    "summary": "List of synchronous webhooks",
                    "value": [
                      {
                        "id": "f6abc4df-eb48-417c-8e75-f7c6d7ad394f",
                        "signing_key": "swsk_y5z3LEHYZ9ndote3qegzWD6uL4t1lfp1",
                        "url": "https://example.com/webhooks/validate-address",
                        "event_type": "fast_checkout.validate_address"
                      },
                      {
                        "id": "5c08dcc1-cd60-4b7d-a255-e42d24d7365c",
                        "signing_key": "swsk_VsuFcq6FIpa9gOWUu0n2WxiCbsDHIJlN",
                        "url": "https://groceries.example.com/webhooks/validate-address",
                        "event_type": "fast_checkout.validate_address",
                        "location_id": "b0ebede4-5cbc-4951-977f-70329faa8769"
                      },
                      {
                        "id": "dbebe6f8-4c47-4176-a94f-576d76e1d0b6",
                        "signing_key": "swsk_0TKYlzoakBgGGVvojCiRRqInMD1ufLZn",
                        "url": "https://clothes.example.com/webhooks/validate-address",
                        "event_type": "fast_checkout.validate_address",
                        "location_id": "6ebd3d2b-7a51-42e4-84f4-3c513621edd3"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Other"
        ]
      }
    },
    "/api/synchronous-webhooks/{synchronous_webhook_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Synchronous-Webhook-Id"
        }
      ],
      "delete": {
        "summary": "Delete a synchronous webhook",
        "operationId": "deleteSynchronousWebhook",
        "description": "Delete a specific synchronous webhook registration, based on its ID.",
        "responses": {
          "204": {
            "description": "Synchronous webhook deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Other"
        ]
      }
    },
    "/api/locations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create a location",
        "operationId": "createLocation",
        "description": "Create a `Location` object.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location-Creation"
              },
              "examples": {
                "example_location": {
                  "summary": "Online location request example",
                  "value": {
                    "name": "Grocery website",
                    "type": "online",
                    "details": {
                      "domain": "example.com"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                },
                "examples": {
                  "online_location_example": {
                    "summary": "Online location example",
                    "value": {
                      "id": "8d9a7125-805f-40f3-a405-bc89765db996",
                      "name": "Grocery website",
                      "type": "online",
                      "details": {
                        "domain": "example.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "get": {
        "summary": "Retrieve location list",
        "operationId": "retrieveLocationList",
        "description": "Retrieve a list of locations registered for the merchant.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                },
                "examples": {
                  "list_of_locations": {
                    "summary": "Online location example",
                    "value": [
                      {
                        "id": "8d9a7125-805f-40f3-a405-bc89765db996",
                        "name": "Grocery website",
                        "type": "online",
                        "details": {
                          "domain": "groceries.example.com"
                        }
                      },
                      {
                        "id": "066223df-d5a8-42f0-b3ce-688c7a76f9a8",
                        "name": "Cars website",
                        "type": "online",
                        "details": {
                          "domain": "cars.example.com"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/locations/{location_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Location-Id"
        }
      ],
      "get": {
        "summary": "Retrieve a location",
        "operationId": "retrieveLocation",
        "description": "Retrieve details of a specific location, based on its ID.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                },
                "examples": {
                  "online_location_example": {
                    "summary": "Online location example",
                    "value": {
                      "id": "8d9a7125-805f-40f3-a405-bc89765db996",
                      "name": "Grocery website",
                      "type": "online",
                      "details": {
                        "domain": "groceries.example.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "patch": {
        "summary": "Update a location",
        "operationId": "updateLocation",
        "description": "Update details of a specific location, based on its ID. \n\n:::note\nThe value of the location's `type` parameter cannot be updated.\n:::",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location-Update"
              },
              "examples": {
                "example_update_location": {
                  "summary": "Example update location request",
                  "value": {
                    "name": "Cars website - Name update",
                    "details": {
                      "domain": "cars.example.com"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                },
                "examples": {
                  "online_location_example": {
                    "summary": "Online location example",
                    "value": {
                      "id": "8d9a7125-805f-40f3-a405-bc89765db996",
                      "name": "Cars website - Name update",
                      "type": "online",
                      "details": {
                        "domain": "cars.example.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "delete": {
        "summary": "Delete a location",
        "operationId": "deleteLocation",
        "description": "Delete a specific location, based on its ID.",
        "responses": {
          "204": {
            "description": "Location deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "Api-Key": []
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Api-Key": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Each Merchant API request must contain an authorization header in the following format to make a call: \n\n```\n'Authorization: Bearer <yourSecretApiKey>'\n```\n\nBefore you start, ensure that you've successfully applied for a Merchant Account in your [Revolut Business Account](https://business.revolut.com/merchant). \n\nThe Public key is on the same path in your Revolut Business account as the Secret key. There are two different functions for each:\n\n- Public key should be provided with payment methods at checkout\n- Secret key is used as a part of the authorization header for all server calls, e.g., creating order\n\nComplete the following steps to generate the Production API keys (Secret, Public):\n\n1. **Log in to your Revolut Business account:** Access the [Revolut Business log in page](https://business.revolut.com/signin) and enter your credentials.\n1. **Navigate to Merchant API settings:** Once logged in, access the [Merchant API settings page](https://business.revolut.com/settings/apis?tab=merchant-api) by clicking <InlineIcon name='Gear' /> in the top right corner, then selecting **APIs > Merchant API**. Here you can access your **Production API keys** (Public, Secret) specific to your Merchant account.\n1. **Get API keys:** If you're visiting this page for the first time, you'll need to generate your **Production API Secret key**, click the **`Generate`** button. \n\n:::note\nUse these keys only for the production environment. For the [Revolut Business Sandbox environment](https://sandbox-business.revolut.com), use the [sandbox API keys](https://sandbox-business.revolut.com/settings/apis?tab=merchant-api).\n:::"
      },
      "SSL": {
        "type": "http",
        "scheme": "SSL",
        "description": ":::note\nThis authentication protocol is used exclusively when using [Fast checkout](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout).\n:::\n\nConnection over HTTPS is using SSL authentication. For successful authentication, your system's certificate should be issued by a Public Certificate Authority (PCA) and your system should trust Revolut's public certificate."
      },
      "Payload-Signature": {
        "type": "apiKey",
        "in": "header",
        "name": "Revolut-Pay-Payload-Signature",
        "description": ":::note\nThis authentication protocol is used exclusively when using [Fast checkout](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/fast-checkout).\n:::\n\nData integrity and authorship will be verified using a payload-based signature. The response of a successful URL registration for address validation (see: [Register address validation for Fast checkout](https://developer.revolut.com/docs/merchant/register-address-validation-endpoint)) will contain a secret signing key. \n\nThe signing key will be used by Revolut to compute a Hash-based Message Authentication Code (HMAC) payload signature whenever the registered URL is called, which should be verified by your backend."
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "schema": {
          "type": "string",
          "format": "Bearer <yourSecretApiKey>",
          "example": "Bearer sk_1234567890ABCdefGHIjklMNOpqrSTUvwxYZ_1234567890-Ab_cdeFGHijkLMNopq"
        },
        "required": true,
        "description": "This parameter accepts the [Merchant API Secret key](https://business.revolut.com/settings/merchant-api) to authorise requests coming from the merchant's backend. \n\nIt ensures that ensures that each request is authenticated and authorised by verifying the secret key. The secret key should be included in all request headers as a `Bearer` token.\n\n:::info\nFor more information, see: [Authorization](https://developer.revolut.com/docs/merchant/merchant-api#authorization)\n:::"
      },
      "Revolut-Api-Version": {
        "name": "Revolut-Api-Version",
        "in": "header",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2024-09-01",
          "enum": [
            "2023-09-01",
            "2024-05-01",
            "2024-09-01"
          ]
        },
        "required": true,
        "description": "The version of the Merchant API, specified in `YYYY-MM-DD` format.\n\nIf not specified, you will receive an error.\n\n\n:::info\nFor more information about API versioning, see: [API versions](https://developer.revolut.com/docs/merchant/api-versions).\n:::",
        "x-config-always-visible-in-example": true
      },
      "Order-Id": {
        "name": "order_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the `Order` object."
      },
      "Revolut-Api-Version-Optional": {
        "name": "Revolut-Api-Version",
        "in": "header",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2023-09-01",
          "enum": [
            "2023-09-01",
            "2024-05-01",
            "2024-09-01"
          ]
        },
        "description": "The version of the Merchant API, specified in `YYYY-MM-DD` format.\n\n:::info\nFor more information about API versioning, see: [API versions](https://developer.revolut.com/docs/merchant/api-versions).\n:::",
        "x-config-always-visible-in-example": true
      },
      "Idempotency-Key": {
        "name": "Idempotency-Key",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `Idempotency-Key` ensures that refund orders are processed only once, preventing multiple executions of the same operation due to retries or duplicate requests. \n\n\nThis header is optional and can accept any unique string value the merchant uses. \n        \nA recommended practice is to utilise the refund entity's ID from the merchant's system as the idempotency key. This facilitates tracking and managing refund requests effectively."
      },
      "Customer-Id": {
        "name": "customer_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the `Customer` object."
      },
      "Payment-Method-Id": {
        "name": "payment_method_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the payment method."
      },
      "Payment-Id": {
        "name": "payment_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the `Payment` object."
      },
      "Payout-Id": {
        "name": "payout_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the `Payout` object."
      },
      "Report-Run-Id": {
        "name": "report_run_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "Unique ID of the report run."
      },
      "Webhook-Id": {
        "name": "webhook_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the webhook."
      },
      "Synchronous-Webhook-Id": {
        "name": "synchronous_webhook_id",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "required": true,
        "description": "The ID of the synchronous webhook."
      },
      "Location-Id": {
        "name": "location_id",
        "schema": {
          "type": "string",
          "format": "uuid",
          "description": "A UUID string, typically used to identify resources."
        },
        "in": "path",
        "required": true,
        "description": "The ID of the location."
      }
    },
    "schemas": {
      "Order-Amount": {
        "type": "integer",
        "description": "The order total expressed in minor currency units, according to the [ISO 4217 standard](https://en.wikipedia.org/wiki/ISO_4217). For example, `7034` in `EUR` corresponds to €70.34.\n\n:::info\nConversion between major and minor units varies by currency. For instance, `100` minor units equal £1.00 in `GBP`, whereas in `ISK` they represent 100 units. For more details, see the [ISO 4217 standard](https://en.wikipedia.org/wiki/ISO_4217).\n:::"
      },
      "Currency": {
        "type": "string",
        "format": "ISO 4217",
        "minLength": 3,
        "maxLength": 3,
        "description": "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
      },
      "Settlement-Currency": {
        "type": "string",
        "description": "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case. \n\nIf `settlement_currency` is different from the value of `currency`, the money will be exchanged when the amount is settled to your merchant account. In case of a refund or chargeback, the money will be exchanged to the order's initial `currency`.\n\nIf `settlement_currency` is not specified, this value is taken from `currency`.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
      },
      "Order-Description": {
        "type": "string",
        "description": "The description of the order."
      },
      "Date-Of-Birth": {
        "type": "string",
        "format": "date",
        "description": "The birth date of the customer."
      },
      "Customer-v2": {
        "type": "object",
        "description": "Object containing information about a customer.\n\nIf you have it, we strongly advise providing at least either `id`, `phone`, or `email`.\n\nUsing the [Customers operations](https://developer.revolut.com/docs/merchant/customers), you can manage customer instances.\n\nThe following behaviours apply to different use cases:\n\n  | Use case | API behavior |\n  | -------- | ------------ |\n  | Existing customer | If `id` was provided, we ignore other customer details and associate the customer with the order.<br/><br/>If either `email`, `phone`, or `full_name` was provided (without an existing customer's `id`), we always create a new customer, irrespective of another, existing customer object having the same details. |\n  | New customer | If either `email`, `phone`, or `full_name` was provided, we create a new customer, irrespective of another customer object having the same details. <br/><br/>If `id` of a non-existent customer was provided, we return a `404` error, irrespective of other details provided. |",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Permanent ID of a customer used to retrieve, update, delete a customer. This ID can also be used to link customer to an order.\n\n:::note\nIf you provide the customer's ID during order creation, no other customer data is required, they will be parsed automatically from the referenced customer object.\n:::"
          },
          "full_name": {
            "type": "string",
            "description": "The customer's full name.",
            "minLength": 2
          },
          "phone": {
            "type": "string",
            "description": "The customer's phone number."
          },
          "email": {
            "type": "string",
            "description": "The customer's email address.\n\n:::note\nIf you wish to save a customer's payment method using any of the available payment methods on the Revolut Checkout Widget ([Revolut Pay](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/revolut-pay/introduction), [Card payments](https://developer.revolut.com/docs/guides/accept-payments/payment-methods/card-payments/introduction)), you need to meet one of the following requirements:\n\n  - Have a customer object with `email` and assign it to the order by providing `customer.id`\n  - Create a new customer with `customer.email` during [order creation](https://developer.revolut.com/docs/merchant/create-order)\n  - Pass the `email` in the configuration of the Revolut Checkout Widget\n\nFor more information, see: [Charge a customer's saved payment method](https://developer.revolut.com/docs/guides/accept-payments/tutorials/save-and-charge-payment-methods/charge-saved-payment-method).\n:::",
            "format": "email"
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/Date-Of-Birth"
          }
        }
      },
      "Address-v2": {
        "type": "object",
        "description": "Object containing address details.",
        "properties": {
          "street_line_1": {
            "type": "string",
            "description": "Street line 1 information.",
            "maxLength": 100
          },
          "street_line_2": {
            "type": "string",
            "description": "Street line 2 information.",
            "maxLength": 100
          },
          "region": {
            "type": "string",
            "description": "The region associated with the address.",
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "description": "The city associated with the address.",
            "maxLength": 100
          },
          "country_code": {
            "type": "string",
            "description": "The 2-letter country code of the country associated with the address.",
            "maxLength": 2
          },
          "postcode": {
            "type": "string",
            "description": "The postcode associated with the address.",
            "maxLength": 100
          }
        },
        "required": [
          "country_code",
          "postcode"
        ]
      },
      "Enforce-Challenge-v2": {
        "type": "string",
        "description": "The enforce challenge mode. `automatic` is used by default.\n\n| Parameter value | Description |\n| --------------- | ----------- |\n| `automatic` | The payments created for an order will have challenge requirement calculated by our fraud mechanisms. Not all payments will trigger a 3DS challenge. |\n| `forced` | The payments created for an order will always require a 3DS challenge. Currently only supported for card payments. |",
        "default": "automatic",
        "enum": [
          "automatic",
          "forced"
        ]
      },
      "Capture-Mode-v2": {
        "type": "string",
        "description": "The capture mode of the order. `automatic` is used by default.\n\n| Parameter value | Description |\n| --------------- | ----------- |\n| `automatic` | The order is captured automatically after payment authorisation. |\n| `manual` | The order is not captured automatically. You must manually capture the order later. |\n\n:::info\nFor more information, see [Capture an order](https://developer.revolut.com/docs/merchant/capture-order).\n:::",
        "default": "automatic",
        "enum": [
          "automatic",
          "manual"
        ]
      },
      "Cancel-Authorised-After": {
        "type": "string",
        "format": "duration",
        "description": "Automatic cancellation period for uncaptured orders, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. \n\nOrders in `authorised` state will be automatically cancelled if they stay uncaptured for longer than the period specified. Maximum: 7 days = `P7D`.\n\n:::note\nThe following limitations apply:\n  - Cannot be a negative value.\n  - Cannot be updated if the new value is less than or equal to the elapsed time since authorisation. \n\n    **Failing scenario:**\n      - Original value: 7 days\n      - Time since authorisation: 3 days\n      - Update value: 2 days\n      \n    In this scenario, an error is returned.\n    \n    **Successful scenario:**\n      - Original value: 7 days\n      - Time since authorisation: 3 days\n      - Update value: 4 days\n\n    In this scenario, the parameter can be updated.\n\n  - Cannot be updated if cancellation is ≤ 30 minutes away.\n\n    **Failing scenario:**\n      - Original value: 12 hours\n      - Time since authorisation: 11 hours 40 minutes\n                        \n    In this scenario, an error is returned.\n    \n    **Successful scenario:** \n      - Original value: 12 hours\n      - Time since authorisation: 11 hours 20 minutes\n\n    In this scenario, the parameter can be updated.\n:::"
      },
      "Location-Id": {
        "type": "string",
        "format": "uuid",
        "description": "Unique ID representing the location where merchants sells products.\n\n:::note\nCurrently, only `online` locations are supported.\n:::\n\n:::info\nFor more information, see: [Locations](https://developer.revolut.com/docs/merchant/locations).\n:::        "
      },
      "Metadata": {
        "type": "object",
        "description": "Additional information to track your orders in your system, by providing custom metadata using `\"<key>\" : \"<value>\"` pairs.\n\n:::caution\nRestrictions:\n\n- Max number of items: `50`\n- Max length of metadata values: `500`\n- Format of metadata keys: `^[a-zA-Z][a-zA-Z\\\\d_]{0,39}$`\n:::",
        "maxItems": 50,
        "additionalProperties": {
          "type": "string"
        }
      },
      "Industry-Data-Type": {
        "type": "string",
        "enum": [
          "airline",
          "crypto",
          "event",
          "lodging",
          "marketplace"
        ],
        "description": "Type of the industry-specific data object, determining what additional data is expected.\n\nAvailable types:\n\n  | Object type   | Description |\n  | ------------- | ----------- |\n  | `airline`     | Object containing information about a specific airline ticket purchase. |\n  | `crypto`      | Object containing information about crypto transactions associated with the order. |\n  | `marketplace` | This object is required by Mastercard and Visa for merchants operating as marketplaces under the **Merchant Category Code (MCC):** `5262`. The marketplace object ensures compliance with the card schemes' regulations by providing detailed information about the subseller involved in the transaction. |\n  | `event` | Object containing information about event ticket bookings associated with the order. |\n  | `lodging` | Object containing information about lodging bookings associated with the order. |"
      },
      "Booking-Id": {
        "type": "string",
        "description": "A unique identifier provided by the merchant associated with the order. \n\nThis `booking_id` is used to reference and correlate booking information with the Merchant API and the merchant's internal system."
      },
      "Refundability": {
        "type": "string",
        "enum": [
          "refundable",
          "non_refundable",
          "partially_refundable"
        ],
        "description": "Parameter indicating whether the ticket is refundable, partially refundable, or not refundable."
      },
      "Passenger": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Passenger's first name."
          },
          "last_name": {
            "type": "string",
            "description": "Passenger's last name."
          }
        },
        "required": [
          "first_name",
          "last_name"
        ]
      },
      "Passengers": {
        "type": "array",
        "description": "Array containing information of passengers associated with the booking.",
        "items": {
          "$ref": "#/components/schemas/Passenger"
        }
      },
      "Journey-Leg": {
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Sequence of the journey legs. Increment by 1 for each flight included in the ticket.\n\nFor example: For a `FRA > LHR > DUB > LHR > FRA` journey the sequence will be assigned as:\n  - `FRA > LHR`: 1\n  - `LHR > DUB`: 2\n  - `DUB > LHR`: 3\n  - `LHR > FRA`: 4"
          },
          "departure_airport_code": {
            "type": "string",
            "description": "The [IATA](https://www.iata.org/en/services/codes) 3-letter airport code for the departure airport."
          },
          "arrival_airport_code": {
            "type": "string",
            "description": "The [IATA](https://www.iata.org/en/services/codes) 3-letter airport code for the arrival airport."
          },
          "flight_number": {
            "type": "string",
            "description": "The flight identifier, without airline code."
          },
          "fare_base_code": {
            "type": "string",
            "description": "The fare base code for the given journey leg."
          },
          "travel_date": {
            "type": "string",
            "format": "date-time",
            "description": "The UTC date and time of the flight departure for the given journey leg."
          },
          "airline_name": {
            "type": "string",
            "description": "The name of the airline associated with the journey leg."
          },
          "airline_code": {
            "type": "string",
            "description": "The IATA 2-letter accounting code identifying the airline associated with the journey leg."
          }
        },
        "required": [
          "sequence",
          "departure_airport_code",
          "arrival_airport_code",
          "travel_date",
          "airline_name",
          "airline_code"
        ]
      },
      "Journey-Legs": {
        "type": "array",
        "description": "Array containing information of journey legs associated with the booking.\n\n:::info\nThis field is required for activating **Revolut Flight Alerts** functionalities within the Revolut app. \n\nThis information is used to compile a tracking widget that provides real-time updates on flight status and sends notifications, such as a check-in reminders, boarding alerts, and notifications for cancellations or delays. \n\nTo enable the widget the following fields are required on order creation or update, before capturing the order:\n\n  ```\n  sequence,\n  departure_airport_code,\n  arrival_airport_code,\n  flight_number,\n  travel_date,\n  airline_name,\n  airline_code,\n  ```\n:::",
        "items": {
          "$ref": "#/components/schemas/Journey-Leg"
        }
      },
      "Airline-Data": {
        "type": "object",
        "description": "Object containing additional information about an airline booking associated with the order. \n\nUse this object to provide required data to enable **Revolut Flight Alerts**. This feature allows users to receive real-time flight updates such as check-in reminders, boarding alerts, and notifications for cancellations or delays in the Revolut app.\n\nTo enable **Revolut Flight Alerts** functionalities in the Revolut app, the following fields are **required** on order creation or update, before capturing the order:\n  ```\n  tickets_purchase,\n  journey_legs,\n  booking_url\n  ```",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Industry-Data-Type"
          },
          "booking_id": {
            "$ref": "#/components/schemas/Booking-Id"
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date-time",
            "description": "The UTC date and time of the final journey leg.\n\n:::caution\nThe following limitations apply:\n  - When creating or updating an order, `fulfillment_date` cannot be set to a date in the past.\n  - When updating an order, if the current `fulfillment_date` value is already in the past, it cannot be modified. The date must remain as is to maintain data integrity for completed transactions.\n:::"
          },
          "tickets_purchase": {
            "type": "boolean",
            "description": "Flag indicating whether the order includes actual ticket purchases. Set to `true` if the order contains ticket purchases, and `false` if it does not (e.g., it **only** contains seat reservations, or baggage upgrades). \n\n:::info\nThis field is required for activating **Revolut Flight Alerts** functionalities within the Revolut app.\n\nProvide the info on order creation or update, before capturing the order.\n:::"
          },
          "ticket_type": {
            "type": "string",
            "enum": [
              "fixed",
              "flexible"
            ],
            "description": "The type of the ticket.\n\n| Parameter value | Description |\n| --------------- | ----------- |\n| `fixed`         | Non-modifiable once confirmed. |\n| `flexible`      | Allows modifications or cancellations under specified conditions. |"
          },
          "crs_code": {
            "type": "string",
            "description": "The code of the Computer Reservation System (CRS) used to make the booking and purchase the ticket."
          },
          "ticket_change_indicator": {
            "type": "string",
            "enum": [
              "new",
              "modification"
            ],
            "description": "Parameter indicating whether this order is related to a new ticket reservation or a modification of an existing one."
          },
          "refundability": {
            "$ref": "#/components/schemas/Refundability"
          },
          "passengers": {
            "$ref": "#/components/schemas/Passengers"
          },
          "journey_legs": {
            "$ref": "#/components/schemas/Journey-Legs"
          },
          "booking_url": {
            "type": "string",
            "format": "url",
            "pattern": "^https?:\\/{2}.+/gi",
            "maxLength": 2000,
            "description": "URL to the online portal for managing the airline booking, which includes check-in functionality. This URL may be a personalised, pre-populated check-in link specific to the user or a generic link, and it is essential for enabling direct access to booking details within the Revolut app.\n\n:::info\nThis field is required for activating **Revolut Flight Alerts** functionalities within the Revolut app. \n\nProvide the info on order creation or update, before capturing the order.\n:::\n\n:::caution\nDomain cannot be localhost or IP address.\n:::"
          }
        },
        "required": [
          "type",
          "booking_id"
        ]
      },
      "Crypto-Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 255,
            "description": "The public transaction hash of the crypto transaction."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "failed",
              "cancelled",
              "completed"
            ],
            "description": "The status of the crypto transaction."
          },
          "recipient_wallet_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The wallet ID of the recipient.\n\n:::note\nAt least one of the parameters: `recipient_user_id` or `recipient_wallet_id` is required.\n::: "
          },
          "recipient_user_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The user ID of the recipient.\n\n:::note\nAt least one of the parameters: `recipient_user_id` or `recipient_wallet_id` is required.\n:::              "
          }
        },
        "required": [
          "id",
          "status",
          "recipient"
        ]
      },
      "Crypto-Transactions": {
        "type": "object",
        "description": "Object containing information about crypto transactions associated with the order.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Industry-Data-Type"
          },
          "transactions": {
            "type": "array",
            "description": "Array of crypto transaction data associated with the order.",
            "items": {
              "$ref": "#/components/schemas/Crypto-Transaction"
            },
            "minItems": 1
          },
          "subseller_mcc": {
            "type": "string",
            "description": "A string representing the four-digit [Merchant Category Code (MCC)](https://en.wikipedia.org/wiki/Merchant_category_code) of the subseller. \n\nThis code should be provided when a customer completes a payment on a subseller's website rather than directly on the merchant's website, providing insight into the type of business conducted by the subseller.",
            "maxLength": 4,
            "minLength": 4,
            "pattern": "^\\d{4}$"
          },
          "subseller_url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the subseller's website.\n\nThis parameter should be provided when a customer completes a payment on a subseller's website rather than directly on the merchant's website, providing additional insight into the type of business conducted by the subseller.\n\n:::caution\nRestrictions: \n- Max length: `2000`\n- Only valid `http://` or `https://` domains are accepted\n- Domain cannot be `localhost` or IP address\n:::",
            "maxLength": 2000,
            "pattern": "^https?:\\/{2}.+/gi"
          }
        },
        "required": [
          "type",
          "transactions"
        ]
      },
      "Address-v4": {
        "type": "object",
        "description": "Details of a physical address.",
        "properties": {
          "street_line_1": {
            "type": "string",
            "description": "Primary address line.",
            "maxLength": 100
          },
          "street_line_2": {
            "type": "string",
            "description": "Secondary address line, such as floor and apartment number.",
            "maxLength": 100
          },
          "region": {
            "type": "string",
            "description": "State or province of the address.",
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "description": "City of the address.",
            "maxLength": 100
          },
          "country_code": {
            "type": "string",
            "pattern": "^[A-Z]{2}$",
            "description": "ISO 2-letter country code.",
            "minLength": 2,
            "maxLength": 2
          },
          "country_subdivision_code": {
            "type": "string",
            "pattern": "^[A-Z]{2}-[A-Z0-9]{1,3}$",
            "description": "The subdivision code represents the state, province, or region within the country, following the [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) standard. This code uniquely identifies subdivisions within a country. \n\nFor example, for London in the United Kingdom, use `GB-LND`.\n\n:::caution\nThe parameter is required for countries listed on the [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) page.\n:::",
            "minLength": 5,
            "maxLength": 6
          },
          "postcode": {
            "type": "string",
            "description": "Postal code of the address.",
            "maxLength": 100
          }
        },
        "required": [
          "street_line_1",
          "city",
          "country_code",
          "postcode"
        ]
      },
      "Subseller": {
        "type": "object",
        "description": "Information about the subseller related to this order.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the subseller in the marketplace's internal system.",
            "minLength": 1,
            "maxLength": 15
          },
          "name": {
            "type": "string",
            "description": "The business or legal name of the subseller.",
            "minLength": 1,
            "maxLength": 50
          },
          "website": {
            "type": "string",
            "format": "url",
            "pattern": "^https:\\/{2}.+/gi",
            "description": "The URL of the website of the subseller.",
            "maxLength": 255
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the subseller."
          },
          "address": {
            "$ref": "#/components/schemas/Address-v4"
          }
        },
        "required": [
          "id",
          "name",
          "website",
          "phone",
          "address"
        ]
      },
      "Marketplace": {
        "type": "object",
        "description": "This object is required by Mastercard and Visa for merchants operating as marketplaces under the Merchant Category Code (MCC) `5262`. The marketplace object ensures compliance with the card schemes' regulations by providing detailed information about the subseller involved in the transaction.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Industry-Data-Type"
          },
          "subseller": {
            "$ref": "#/components/schemas/Subseller"
          }
        },
        "required": [
          "type",
          "subseller"
        ]
      },
      "Supplier-Payment-Date": {
        "type": "string",
        "format": "date-time",
        "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time when the funds are released to merchants."
      },
      "Ticket": {
        "type": "object",
        "description": "Object containing information about a ticket associated with the booking.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier provided by the merchant associated with the ticket."
          },
          "transferable": {
            "type": "boolean",
            "description": "Indicates whether the ticket is transferable to another buyer."
          },
          "refundability": {
            "$ref": "#/components/schemas/Refundability"
          }
        },
        "required": [
          "id"
        ]
      },
      "Event": {
        "type": "object",
        "description": "Object containing booking information about a specific event. ",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time when the event starts."
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time when the event ends."
          },
          "supplier": {
            "type": "string",
            "description": "Legal name of the ticket vendor/event organiser."
          },
          "supplier_payment_date": {
            "$ref": "#/components/schemas/Supplier-Payment-Date"
          },
          "name": {
            "type": "string",
            "description": "The name of the event."
          },
          "location": {
            "type": "object",
            "description": "The address of the event location.",
            "properties": {
              "street_line_1": {
                "type": "string",
                "description": "Primary address line.",
                "maxLength": 100
              },
              "street_line_2": {
                "type": "string",
                "description": "Secondary address line, such as floor and apartment number.",
                "maxLength": 100
              },
              "region": {
                "type": "string",
                "description": "State or province of the address.",
                "maxLength": 100
              },
              "city": {
                "type": "string",
                "description": "City of the address.",
                "maxLength": 100
              },
              "country_code": {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "description": "ISO 2-letter country code.",
                "minLength": 2,
                "maxLength": 2
              },
              "postcode": {
                "type": "string",
                "description": "Postal code of the address.",
                "maxLength": 100
              }
            },
            "required": [
              "street_line_1",
              "city",
              "country_code",
              "postcode"
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "concert",
              "conference",
              "convention",
              "exhibition",
              "festival",
              "party",
              "performance",
              "other"
            ],
            "description": "The type of the event."
          },
          "market": {
            "type": "string",
            "enum": [
              "primary",
              "secondary"
            ],
            "description": "Indicates the relationship between the ticket vendor and the event organiser. \n\n| Parameter value | Description |\n| --------------- | ----------- |\n| `primary`       | The merchant is the organiser and primary distributor of the tickets. |\n| `secondary`     | The merchant is a reseller, only distributing the tickets. |"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            },
            "description": "A list of tickets associated with the booking."
          }
        }
      },
      "Events": {
        "type": "object",
        "description": "Object containing booking information for a list of event tickets associated with the order.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Industry-Data-Type"
          },
          "booking_id": {
            "$ref": "#/components/schemas/Booking-Id"
          },
          "events": {
            "type": "array",
            "description": "A list of events associated with the booking.",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "type",
          "booking_id"
        ]
      },
      "Guest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Guest's first name."
          },
          "last_name": {
            "type": "string",
            "description": "Guest's last name."
          }
        },
        "required": [
          "first_name",
          "last_name"
        ]
      },
      "Guests": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Guest"
        },
        "description": "List of guests associated with the booking."
      },
      "Lodging": {
        "type": "object",
        "description": "Object containing details of a lodging booking.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Industry-Data-Type"
          },
          "booking_id": {
            "$ref": "#/components/schemas/Booking-Id"
          },
          "check_in_date": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time of the check-in."
          },
          "check_out_date": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time of the check-out."
          },
          "supplier_payment_date": {
            "$ref": "#/components/schemas/Supplier-Payment-Date"
          },
          "category": {
            "type": "string",
            "enum": [
              "bed_and_breakfast",
              "hostel",
              "hotel",
              "short_term_rental",
              "other"
            ],
            "description": "The type of the accommodation associated with the booking."
          },
          "booking_type": {
            "type": "string",
            "enum": [
              "fixed",
              "flexible"
            ],
            "description": "Indicates whether the booking terms are fixed or flexible.\n\n| Parameter value | Description |\n| --------------- | ----------- |\n| `fixed`         | Non-modifiable once confirmed. |\n| `flexible`      | Allows modifications or cancellations under specified conditions. |"
          },
          "refundability": {
            "$ref": "#/components/schemas/Refundability"
          },
          "location": {
            "type": "object",
            "description": "Address of the accommodation.",
            "properties": {
              "street_line_1": {
                "type": "string",
                "description": "Primary address line.",
                "maxLength": 100
              },
              "street_line_2": {
                "type": "string",
                "description": "Secondary address line, such as floor and apartment number.",
                "maxLength": 100
              },
              "region": {
                "type": "string",
                "description": "State or province of the address.",
                "maxLength": 100
              },
              "city": {
                "type": "string",
                "description": "City of the address.",
                "maxLength": 100
              },
              "country_code": {
                "type": "string",
                "pattern": "^[A-Z]{2}$",
                "description": "ISO 2-letter country code.",
                "minLength": 2,
                "maxLength": 2
              },
              "postcode": {
                "type": "string",
                "description": "Postal code of the address.",
                "maxLength": 100
              }
            },
            "required": [
              "street_line_1",
              "city",
              "country_code",
              "postcode"
            ]
          },
          "guests": {
            "$ref": "#/components/schemas/Guests"
          }
        },
        "required": [
          "type",
          "booking_id"
        ]
      },
      "Industry-Data": {
        "type": "object",
        "description": "Object containing industry-specific information associated with the order.\n\n:::info\nIn the following cases, industry-specific info is required. Omitting this information may trigger additional scrutiny and risk mitigation actions by the Revolut risk team.\n\n  | Transaction type | Required for | \n  | ---------------- | ----------- |\n  | `airline`        | Airlines and Online Travel Agencies (OTAs). |\n  | `crypto`         | Crypto merchants. |\n  | `marketplace`    | Marketplace merchants. |\n  | `event`          | Event ticket sellers. |\n  | `lodging`        | Lodging providers. |\n:::",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "airline": "#/components/schemas/Airline-Data",
            "crypto": "#/components/schemas/Crypto-Transactions",
            "marketplace": "#/components/schemas/Marketplace",
            "event": "#/components/schemas/Events",
            "lodging": "#/components/schemas/Lodging"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Airline-Data"
          },
          {
            "$ref": "#/components/schemas/Crypto-Transactions"
          },
          {
            "$ref": "#/components/schemas/Marketplace"
          },
          {
            "$ref": "#/components/schemas/Events"
          },
          {
            "$ref": "#/components/schemas/Lodging"
          }
        ]
      },
      "Merchant-Order-Url": {
        "type": "string",
        "maxLength": 2000,
        "description": "The URL of the order stored in the merchant's order management system.\n\nThis URL will be included in the order confirmation email for payments made via Revolut Pay. If specified, this URL will override the default link to the merchant's **Business website** configured in the Revolut Business account.\n\n:::caution\nRestrictions:\n- Max length of `url` string: `2000`\n- Only valid `http://` or `https://` domains are accepted\n- Domain cannot be `localhost` or IP address\n:::"
      },
      "Merchant-Order-External-Reference": {
        "type": "string",
        "description": "Merchant order ID for external reference.\n\nUse this field to set the ID that your own system can use to easily track orders."
      },
      "Merchant-Order-Data": {
        "type": "object",
        "description": "Object for providing additional information stored in the merchant's order management system. ",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/Merchant-Order-Url"
          },
          "reference": {
            "$ref": "#/components/schemas/Merchant-Order-External-Reference"
          }
        }
      },
      "Upcoming-Payment": {
        "type": "object",
        "description": "Object containing information about upcoming payments associated with the order.",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when the upcoming payment is scheduled to be executed."
          },
          "payment_method_id": {
            "type": "string",
            "description": "The unique ID of the customer's payment method used to complete the scheduled payment.\n\n:::info\nFor more information about operations related to customer's payment methods, see:\n  - [Retrieve all payment methods of a customer](https://developer.revolut.com/docs/merchant/retrieve-all-payment-methods)\n  - [Retrieve a customer's payment method](https://developer.revolut.com/docs/merchant/retrieve-payment-method)\n  - [Update a customer's payment method](https://developer.revolut.com/docs/merchant/update-payment-method)\n  - [Delete a customer's payment method](https://developer.revolut.com/docs/merchant/delete-payment-method)\n:::"
          }
        },
        "required": [
          "date",
          "payment_method_id"
        ]
      },
      "Redirect-Url": {
        "type": "string",
        "format": "url",
        "pattern": "^https:\\/{2}.+/gi",
        "description": "The URL your customer will be redirected to after completing a payment on the hosted checkout page (`checkout_url` parameter's value of the order).\n\n:::info\nFor more information on how to use the `redirect_url`, see: [Custom redirection via the API](https://developer.revolut.com/docs/guides/accept-payments/tutorials/payment-link#custom-redirection-via-the-api)\n:::"
      },
      "Statement-Descriptor-Suffix": {
        "type": "string",
        "description": "You can set a dynamic statement descriptor for your orders by providing a custom suffix. \n\nA statement descriptor is the text shown on cardholders' bank or card statements, helping them recognise a transaction or merchant. This field can be used to send extra information with the statement descriptor for card transactions.\n\nThe complete descriptor is built using the following format: `{base}*{suffix}`, where:\n  \n  - **`{base}`** is the existing descriptor configured in the Revolut Business dashboard (**Settings > Business account > Merchant profile > Statement descriptor**).  \n  - **`{suffix}`** is defined by the `statement_descriptor_suffix` field.\n\n:::note\n- If the combined descriptor's length (base + suffix) exceeds the character limits of card scheme providers, the final value will be truncated. For example if the limit is 22 characters, the base descriptor is `\"base\"` and the suffix is `\"testdescriptorsuffix\"`, the final descriptor becomes `\"base*testdescriptorsuf\"`.\n- The final statement descriptor shown on a cardholder's statement may vary by issuing bank, as some banks apply their own custom formatting or truncation rules.\n:::",
        "minLength": 1,
        "maxLength": 19,
        "pattern": "^[^*\\n\\r\\\\]+$"
      },
      "Order-Creation-v2": {
        "type": "object",
        "description": "Object schema containing information about order creation body request parameters.",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Order-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/Settlement-Currency"
          },
          "description": {
            "$ref": "#/components/schemas/Order-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer-v2"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address-v2"
          },
          "enforce_challenge": {
            "$ref": "#/components/schemas/Enforce-Challenge-v2"
          },
          "capture_mode": {
            "$ref": "#/components/schemas/Capture-Mode-v2"
          },
          "cancel_authorised_after": {
            "$ref": "#/components/schemas/Cancel-Authorised-After"
          },
          "location_id": {
            "$ref": "#/components/schemas/Location-Id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "industry_data": {
            "$ref": "#/components/schemas/Industry-Data"
          },
          "merchant_order_data": {
            "$ref": "#/components/schemas/Merchant-Order-Data"
          },
          "upcoming_payment_data": {
            "$ref": "#/components/schemas/Upcoming-Payment"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/Redirect-Url"
          },
          "statement_descriptor_suffix": {
            "$ref": "#/components/schemas/Statement-Descriptor-Suffix"
          }
        },
        "required": [
          "amount",
          "currency"
        ]
      },
      "Order-Id": {
        "type": "string",
        "format": "uuid",
        "description": "Permanent order ID used to retrieve, capture, cancel, or refund an order after authorization."
      },
      "Order-Token": {
        "type": "string",
        "description": "Temporary ID for the order, which expires when the payment is authorised.\n\nThe order `token` is used to [initialise the Revolut Checkout widget](https://developer.revolut.com/docs/sdks/merchant-web-sdk/initialize-widget/instance/revolutcheckout-instance), and to be returned by the `createOrder` callback on the [Revolut Pay widget](https://developer.revolut.com/docs/sdks/merchant-web-sdk/initialize-widget/revolut-checkout-payments/revolut-pay#mount-options) and [Apple Pay and Google Pay widget](https://developer.revolut.com/docs/sdks/merchant-web-sdk/initialize-widget/revolut-checkout-payments/payment-request#options)."
      },
      "Order-Type-v2": {
        "type": "string",
        "description": "The type of the order.",
        "enum": [
          "payment",
          "payment_request",
          "refund",
          "chargeback",
          "chargeback_reversal",
          "credit_reimbursement"
        ]
      },
      "Order-State-v2": {
        "type": "string",
        "description": "The state of the order.\n\n:::info\nFor more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::",
        "enum": [
          "pending",
          "processing",
          "authorised",
          "completed",
          "cancelled",
          "failed"
        ]
      },
      "Outstanding-Amount": {
        "type": "integer",
        "description": "The amount not yet paid for a given order (in minor currency units). For example, `7034` represents €70.34. \n\nThe value in this field may differ from `amount` if there are partial payments associated with the order."
      },
      "Refunded-Amount": {
        "type": "integer",
        "description": "The amount that was refunded from the order (in minor currency units). For example, `7034` represents €70.34. \n\nThis applies to orders that have been refunded (i.e., orders of type `payment` that have a related `refund` order)."
      },
      "Payment-Id": {
        "type": "string",
        "format": "uuid",
        "description": "The ID of the payment."
      },
      "Payment-State-v2": {
        "type": "string",
        "description": "The status of the payment.",
        "enum": [
          "pending",
          "authentication_challenge",
          "authentication_verified",
          "authorisation_started",
          "authorisation_passed",
          "authorised",
          "capture_started",
          "captured",
          "refund_validated",
          "refund_started",
          "cancellation_started",
          "declining",
          "completing",
          "cancelling",
          "failing",
          "completed",
          "declined",
          "soft_declined",
          "cancelled",
          "failed"
        ]
      },
      "Decline-Reason-v2": {
        "type": "string",
        "description": "The reason for a `failed` or `declined` payment.\n\nA failed or declined payment can result from multiple reasons. To learn more, check our [failure reasons](https://developer.revolut.com/docs/guides/accept-payments/other-resources/errors/decline-reasons).",
        "enum": [
          "3ds_challenge_abandoned",
          "3ds_challenge_failed_manually",
          "cardholder_name_missing",
          "customer_challenge_abandoned",
          "customer_challenge_failed",
          "customer_name_mismatch",
          "do_not_honour",
          "expired_card",
          "high_risk",
          "insufficient_funds",
          "invalid_address",
          "invalid_amount",
          "invalid_card",
          "invalid_country",
          "invalid_cvv",
          "invalid_email",
          "invalid_expiry",
          "invalid_merchant",
          "invalid_phone",
          "invalid_pin",
          "issuer_not_available",
          "pick_up_card",
          "rejected_by_customer",
          "restricted_card",
          "suspected_fraud",
          "technical_error",
          "transaction_not_allowed_for_cardholder",
          "unknown_card",
          "withdrawal_limit_exceeded"
        ]
      },
      "Bank-Message": {
        "type": "string",
        "description": "The reason for a `failed` or `declined` payment, sent by the financial institution processing the payment."
      },
      "Payment-Created": {
        "type": "string",
        "format": "date-time",
        "description": "The date and time the payment was created."
      },
      "Payment-Updated": {
        "type": "string",
        "format": "date-time",
        "description": "The date and time the payment was last updated."
      },
      "Payment-Token": {
        "type": "string",
        "format": "uuid",
        "description": "Temporary token of the payment used to fetch the reward offer during checkout and link user registrations to the given offers. \n\nThe token is only valid for a limited time."
      },
      "Payment-Settled-Amount": {
        "type": "integer",
        "description": "The amount of the settled payment (minor currency unit). For example, `7034` stands for €70.34."
      },
      "Payment-Settled-Currency": {
        "type": "string",
        "description": "The currency of the settled payment. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
      },
      "Payment-Method-Type": {
        "type": "string",
        "enum": [
          "apple_pay",
          "card",
          "google_pay",
          "revolut_pay_card",
          "revolut_pay_account"
        ],
        "description": "The type of payment method used to pay for the order.\n\nAvailable values:\n\n| Payment method `type` | Description |\n| --------------------- | ----------- |\n| `apple_pay` | The customer paid the order using Apple Pay. |\n| `card` | The customer paid the order using their credit or debit card. |\n| `google_pay` | The customer paid the order using Google Pay. |\n| `revolut_pay_card` | The customer paid the order via Revolut Pay using their credit or debit card. |\n| `revolut_pay_account` | The customer paid the order via Revolut Pay using their Revolut account. |"
      },
      "Card-Checks-v2": {
        "type": "object",
        "description": "The details of the check for card payment. Only for orders with successful payments.",
        "properties": {
          "three_ds": {
            "type": "object",
            "description": "The details of the 3D Secure check. Only for orders with successful payments.\n\n:::note\nNot returned for Apple Pay and Google Pay payments.\n:::",
            "properties": {
              "eci": {
                "type": "string",
                "description": "The Electronic Commerce Indicator (ECI) value corresponds to the authentication result and indicates the level of security used when the payment information was provided."
              },
              "state": {
                "type": "string",
                "description": "The result of 3D Secure check.",
                "enum": [
                  "verified",
                  "failed",
                  "challenge"
                ]
              },
              "version": {
                "type": "integer",
                "description": "The 3D Secure version."
              }
            }
          },
          "cvv_verification": {
            "type": "string",
            "description": "The result of CVV verification.\n\n| Parameter value | Description |\n| ----- | ----------- |\n| `match` | CVV matches the card's CVV |\n| `not_match` | CVV does not match the card's CVV |\n| `incorrect` | CVV format is incorrect for this type of card |\n| `not_processed` | CVV verification was not performed |",
            "enum": [
              "match",
              "not_match",
              "incorrect",
              "not_processed"
            ]
          },
          "address": {
            "type": "string",
            "description": "The result of address verification.",
            "enum": [
              "match",
              "not_match",
              "n_a",
              "invalid"
            ]
          },
          "postcode": {
            "type": "string",
            "description": "The result of postcode verification.",
            "enum": [
              "match",
              "not_match",
              "n_a",
              "invalid"
            ]
          },
          "cardholder": {
            "type": "string",
            "description": "The result of cardholder verification.",
            "enum": [
              "match",
              "not_match",
              "n_a",
              "invalid"
            ]
          }
        }
      },
      "Fingerprint": {
        "type": "string",
        "minLength": 44,
        "maxLength": 44,
        "description": "A unique identifier for a payment method, always 44 characters long. This fingerprint can be used to uniquely identify various payment methods.\n\n#### Fingerprint generation\n\n| Payment method | Description |\n| -------- | ----------- |\n| **All payment methods** | A fingerprint is generated for all payment methods, including cards, Revolut Pay (card, account-to-account payments), Apple Pay, and Google Pay. |\n| **Cards (Revolut Pay & Card Gateway)** | For cards, the fingerprint is based on the PAN. Cards processed via Revolut Pay and our card gateway will share the same fingerprint. Renewed cards (new expiry/CVV) retain the same fingerprint for efficient blocking. |\n| **Apple Pay & Google Pay** | Since Apple Pay and Google Pay provide us Device PANs (DPAN), the fingerprint is based on the DPAN provided by Apple/Google, not the connected card's PAN. This means that a new DPAN (and fingerprint) is generated for cards in case they are re-added to the customer's digital wallet, or added to different devices. |\n\n#### Detecting duplicate payment methods\n\nFingerprints are a valuable tool for detecting duplicate payment methods by identifying if a payment method has been seen before. This capability, in turn, helps in preventing various types of misuse (e.g., exploitation of free trials, or association with known problematic accounts, which can be a form of fraud). To effectively use fingerprints for this purpose, you will need to create and maintain your own lists (e.g., blocklists of known problematic fingerprints, allowlists for trusted customers, or tracking frequently used fingerprints). \n\nThe ideal way to utilise fingerprints is by combining them with a manual capture process. While automatic capture with subsequent refunds for problematic payments is possible, manual capture based on fingerprint validation is recommended.\n\nDuring your manual capture workflow, after a payment was authorised:\n  \n  - Check the fingerprint status by comparing it against your maintained lists and internal business rules.\n  - If you decide to proceed with the payment (e.g., the fingerprint is not on a blocklist, or matches a trusted customer's previous payment method): [Capture the order](https://developer.revolut.com/docs/merchant/capture-order).\n  - If you decide not to proceed with the payment (e.g., the fingerprint matches a known fraudulent fingerprint, or exhibits suspicious patterns): [Cancel the order](https://developer.revolut.com/docs/merchant/cancel-order)."
      },
      "Apple-Pay": {
        "type": "object",
        "description": "Object containing details of a card used via Apple Pay.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned when the payment method is saved.\n:::"
          },
          "type": {
            "$ref": "#/components/schemas/Payment-Method-Type"
          },
          "card_brand": {
            "type": "string",
            "description": "The type of the card.",
            "enum": [
              "visa",
              "mastercard",
              "american_express"
            ]
          },
          "funding": {
            "type": "string",
            "description": "The type of card funding.",
            "enum": [
              "credit",
              "debit",
              "prepaid"
            ]
          },
          "card_country_code": {
            "type": "string",
            "description": "The 2-letter country code of the country where the card was issued."
          },
          "card_bin": {
            "type": "string",
            "description": "The BIN of the card.",
            "minLength": 6,
            "maxLength": 6
          },
          "card_last_four": {
            "type": "string",
            "description": "The last four digits of the card number.",
            "minLength": 4,
            "maxLength": 4
          },
          "card_expiry": {
            "type": "string",
            "format": "MM/YY",
            "description": "The expiry date of the card in the format of MM/YY."
          },
          "cardholder_name": {
            "type": "string",
            "description": "The name of the cardholder."
          },
          "checks": {
            "$ref": "#/components/schemas/Card-Checks-v2"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "type"
        ]
      },
      "Card": {
        "type": "object",
        "description": "Object containing details of the card used for the payment.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned when the payment method is saved.\n:::"
          },
          "type": {
            "$ref": "#/components/schemas/Payment-Method-Type"
          },
          "card_brand": {
            "type": "string",
            "description": "The type of the card.",
            "enum": [
              "visa",
              "mastercard",
              "american_express"
            ]
          },
          "funding": {
            "type": "string",
            "description": "The type of card funding.",
            "enum": [
              "credit",
              "debit",
              "prepaid"
            ]
          },
          "card_country_code": {
            "type": "string",
            "description": "The 2-letter country code of the country where the card was issued."
          },
          "card_bin": {
            "type": "string",
            "description": "The BIN of the card.",
            "minLength": 6,
            "maxLength": 6
          },
          "card_last_four": {
            "type": "string",
            "description": "The last four digits of the card number.",
            "minLength": 4,
            "maxLength": 4
          },
          "card_expiry": {
            "type": "string",
            "format": "MM/YY",
            "description": "The expiry date of the card in the format of MM/YY."
          },
          "cardholder_name": {
            "type": "string",
            "description": "The name of the cardholder."
          },
          "checks": {
            "$ref": "#/components/schemas/Card-Checks-v2"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "type"
        ]
      },
      "Google-Pay": {
        "type": "object",
        "description": "Object containing details of a card used via Google Pay.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned when the payment method is saved.\n:::"
          },
          "type": {
            "$ref": "#/components/schemas/Payment-Method-Type"
          },
          "card_brand": {
            "type": "string",
            "description": "The type of the card.",
            "enum": [
              "visa",
              "mastercard",
              "american_express"
            ]
          },
          "funding": {
            "type": "string",
            "description": "The type of card funding.",
            "enum": [
              "credit",
              "debit",
              "prepaid"
            ]
          },
          "card_country_code": {
            "type": "string",
            "description": "The 2-letter country code of the country where the card was issued."
          },
          "card_bin": {
            "type": "string",
            "description": "The BIN of the card.",
            "minLength": 6,
            "maxLength": 6
          },
          "card_last_four": {
            "type": "string",
            "description": "The last four digits of the card number.",
            "minLength": 4,
            "maxLength": 4
          },
          "card_expiry": {
            "type": "string",
            "format": "MM/YY",
            "description": "The expiry date of the card in the format of MM/YY."
          },
          "cardholder_name": {
            "type": "string",
            "description": "The name of the cardholder."
          },
          "checks": {
            "$ref": "#/components/schemas/Card-Checks-v2"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "type"
        ]
      },
      "Revolut-Pay-Card": {
        "type": "object",
        "description": "Object containing details of a card used via Revolut Pay.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned when the payment method is saved.\n:::"
          },
          "type": {
            "$ref": "#/components/schemas/Payment-Method-Type"
          },
          "card_brand": {
            "type": "string",
            "description": "The type of the card.",
            "enum": [
              "visa",
              "mastercard",
              "american_express"
            ]
          },
          "funding": {
            "type": "string",
            "description": "The type of card funding.",
            "enum": [
              "credit",
              "debit",
              "prepaid"
            ]
          },
          "card_country_code": {
            "type": "string",
            "description": "The 2-letter country code of the country where the card was issued."
          },
          "card_bin": {
            "type": "string",
            "description": "The BIN of the card.",
            "minLength": 6,
            "maxLength": 6
          },
          "card_last_four": {
            "type": "string",
            "description": "The last four digits of the card number.",
            "minLength": 4,
            "maxLength": 4
          },
          "card_expiry": {
            "type": "string",
            "format": "MM/YY",
            "description": "The expiry date of the card in the format of MM/YY."
          },
          "cardholder_name": {
            "type": "string",
            "description": "The name of the cardholder."
          },
          "checks": {
            "$ref": "#/components/schemas/Card-Checks-v2"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "type"
        ]
      },
      "Revolut-Pay-Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned when the payment method is saved.\n:::"
          },
          "type": {
            "$ref": "#/components/schemas/Payment-Method-Type"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          }
        },
        "required": [
          "type"
        ]
      },
      "Payment-Method-v2": {
        "type": "object",
        "description": "The details of the payment method used to make the payment.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "apple_pay": "#/components/schemas/Apple-Pay",
            "card": "#/components/schemas/Card",
            "google_pay": "#/components/schemas/Google-Pay",
            "revolut_pay_card": "#/components/schemas/Revolut-Pay-Card",
            "revolut_pay_account": "#/components/schemas/Revolut-Pay-Account"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Apple-Pay"
          },
          {
            "$ref": "#/components/schemas/Card"
          },
          {
            "$ref": "#/components/schemas/Google-Pay"
          },
          {
            "$ref": "#/components/schemas/Revolut-Pay-Card"
          },
          {
            "$ref": "#/components/schemas/Revolut-Pay-Account"
          }
        ]
      },
      "Three-Ds": {
        "title": "three_ds",
        "type": "object",
        "description": "Information about the 3DS challenge.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "three_ds",
              "three_ds_fingerprint"
            ],
            "description": "Type of the authentication challenge the payment triggers."
          },
          "acs_url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the authentication challenge."
          }
        },
        "required": [
          "type",
          "acs_url"
        ]
      },
      "Three-Ds-Fingerprint": {
        "title": "three_ds_fingerprint",
        "type": "object",
        "description": "Information about the 3DS fingerprint challenge.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "three_ds",
              "three_ds_fingerprint"
            ],
            "description": "Type of the authentication challenge the payment triggers."
          },
          "fingerprint_url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the fingerprint. (Used only internally by Revolut.)"
          },
          "fingerprint_data": {
            "type": "string",
            "format": "JSON",
            "description": "Data about the fingerprint used for authentication. (Used only internally\nby Revolut.)"
          }
        },
        "required": [
          "type",
          "fingerprint_url",
          "fingerprint_data"
        ]
      },
      "Authentication-Challenge": {
        "type": "object",
        "description": "Details about the authentication challenge that should be performed to complete the authentication process. For more information about Revolut's 3DS solution, see: [3D Secure overview](https://developer.revolut.com/docs/guides/accept-payments/other-resources/3d-secure-overview).\n\nOnly returned if the payment's state is `authentication_challenge`.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "three_ds": "#/components/schemas/Three-Ds",
            "three_ds_fingerprint": "#/components/schemas/Three-Ds-Fingerprint"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Three-Ds"
          },
          {
            "$ref": "#/components/schemas/Three-Ds-Fingerprint"
          }
        ]
      },
      "Payment-Risk-Level": {
        "type": "string",
        "description": "The risk level of the card.\n\nIf the risk level is `high`, the payment might be declined.",
        "enum": [
          "low",
          "high"
        ]
      },
      "Fee": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the order fee.",
            "enum": [
              "fx",
              "acquiring"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the payment fee (minor currency unit). For example, enter `7034` for €70.34 in the field."
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment fee. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
          }
        }
      },
      "Fees": {
        "type": "array",
        "description": "The details of the order fee.",
        "items": {
          "$ref": "#/components/schemas/Fee"
        }
      },
      "Payment-v2": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "state": {
            "$ref": "#/components/schemas/Payment-State-v2"
          },
          "decline_reason": {
            "$ref": "#/components/schemas/Decline-Reason-v2"
          },
          "bank_message": {
            "$ref": "#/components/schemas/Bank-Message"
          },
          "created_at": {
            "$ref": "#/components/schemas/Payment-Created"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Payment-Updated"
          },
          "token": {
            "$ref": "#/components/schemas/Payment-Token"
          },
          "amount": {
            "$ref": "#/components/schemas/Order-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "settled_amount": {
            "$ref": "#/components/schemas/Payment-Settled-Amount"
          },
          "settled_currency": {
            "$ref": "#/components/schemas/Payment-Settled-Currency"
          },
          "payment_method": {
            "$ref": "#/components/schemas/Payment-Method-v2"
          },
          "authentication_challenge": {
            "$ref": "#/components/schemas/Authentication-Challenge"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address-v2"
          },
          "risk_level": {
            "$ref": "#/components/schemas/Payment-Risk-Level"
          },
          "fees": {
            "$ref": "#/components/schemas/Fees"
          }
        },
        "required": [
          "id",
          "state",
          "created_at",
          "updated_at",
          "amount"
        ]
      },
      "Checkout-Url": {
        "type": "string",
        "description": "Link to a checkout page hosted by Revolut.",
        "format": "uri"
      },
      "Order-v2": {
        "title": "Order v2",
        "type": "object",
        "description": "To process the order from a credit or debit card, you create an `Order` object. You can then retrieve, capture, cancel, refund, or pay an order using its unique `id`. Alternatively, you can use its unique `token` to process a card payment with the Revolut Checkout Widget.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Order-Id"
          },
          "token": {
            "$ref": "#/components/schemas/Order-Token"
          },
          "type": {
            "$ref": "#/components/schemas/Order-Type-v2"
          },
          "state": {
            "$ref": "#/components/schemas/Order-State-v2"
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the order was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the order was last updated.",
            "format": "date-time"
          },
          "description": {
            "$ref": "#/components/schemas/Order-Description"
          },
          "capture_mode": {
            "$ref": "#/components/schemas/Capture-Mode-v2"
          },
          "cancel_authorised_after": {
            "$ref": "#/components/schemas/Cancel-Authorised-After"
          },
          "amount": {
            "$ref": "#/components/schemas/Order-Amount"
          },
          "outstanding_amount": {
            "$ref": "#/components/schemas/Outstanding-Amount"
          },
          "refunded_amount": {
            "$ref": "#/components/schemas/Refunded-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/Settlement-Currency"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer-v2"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address-v2"
          },
          "payments": {
            "type": "array",
            "description": "The details of all the payments that have been made towards this order (successful or unsuccessful).",
            "items": {
              "$ref": "#/components/schemas/Payment-v2"
            }
          },
          "location_id": {
            "$ref": "#/components/schemas/Location-Id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "industry_data": {
            "$ref": "#/components/schemas/Industry-Data"
          },
          "merchant_order_data": {
            "$ref": "#/components/schemas/Merchant-Order-Data"
          },
          "upcoming_payment_data": {
            "$ref": "#/components/schemas/Upcoming-Payment"
          },
          "checkout_url": {
            "$ref": "#/components/schemas/Checkout-Url"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/Redirect-Url"
          },
          "enforce_challenge": {
            "$ref": "#/components/schemas/Enforce-Challenge-v2"
          },
          "statement_descriptor_suffix": {
            "$ref": "#/components/schemas/Statement-Descriptor-Suffix"
          }
        }
      },
      "Error-v2": {
        "title": "Error",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "An identifier that can be used to determine what went wrong.\n\nError codes are not globally unique, but uniqueness is guaranteed within endpoints."
          },
          "message": {
            "type": "string",
            "description": "Some human readable text describing what went wrong."
          },
          "timestamp": {
            "type": "integer",
            "description": "The [UNIX timestamp](https://www.unixtimestamp.com/) of the date and time the error happened."
          }
        }
      },
      "Order-Update-v2": {
        "type": "object",
        "description": "Object schema containing information about order update request.",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Order-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/Settlement-Currency"
          },
          "description": {
            "$ref": "#/components/schemas/Order-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer-v2"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address-v2"
          },
          "enforce_challenge": {
            "$ref": "#/components/schemas/Enforce-Challenge-v2"
          },
          "capture_mode": {
            "$ref": "#/components/schemas/Capture-Mode-v2"
          },
          "cancel_authorised_after": {
            "$ref": "#/components/schemas/Cancel-Authorised-After"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "industry_data": {
            "$ref": "#/components/schemas/Industry-Data"
          },
          "merchant_order_data": {
            "$ref": "#/components/schemas/Merchant-Order-Data"
          },
          "upcoming_payment_data": {
            "$ref": "#/components/schemas/Upcoming-Payment"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/Redirect-Url"
          },
          "statement_descriptor_suffix": {
            "$ref": "#/components/schemas/Statement-Descriptor-Suffix"
          }
        }
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "street_line_1": {
            "type": "string",
            "description": "Street line 1 information."
          },
          "street_line_2": {
            "type": "string",
            "description": "Street line 2 information."
          },
          "region": {
            "type": "string",
            "description": "The region associated with the address."
          },
          "city": {
            "type": "string",
            "description": "The city associated with the address."
          },
          "country_code": {
            "type": "string",
            "description": "The country associated with the address."
          },
          "postcode": {
            "type": "string",
            "description": "The postcode associated with the address."
          }
        },
        "required": [
          "country_code",
          "postcode"
        ]
      },
      "Simplified-Order": {
        "title": "Simplified-Order",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Permanent order ID used to retrieve, capture, cancel, or refund an order after authorisation."
          },
          "type": {
            "type": "string",
            "description": "The type of the order.",
            "enum": [
              "PAYMENT",
              "REFUND",
              "CHARGEBACK"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the order.\n\n:::info\nFor more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::",
            "enum": [
              "PENDING",
              "PROCESSING",
              "AUTHORISED",
              "COMPLETED",
              "CANCELLED",
              "FAILED"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the order was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the order was last updated.",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "description": "The date and time the order was completed.",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "The description of the order."
          },
          "capture_mode": {
            "type": "string",
            "description": "The capture mode of the order. `AUTOMATIC` is used by default.\n\n- `AUTOMATIC`: The order is captured automatically after payment authorisation.\n- `MANUAL`: The order is not captured automatically. You must manually capture the order later.\n\nFor more information, see [Capture an order](https://developer.revolut.com/docs/merchant/capture-order)."
          },
          "settlement_currency": {
            "type": "string",
            "description": "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case. All payments made towards this order are settled in this currency.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
          },
          "merchant_order_ext_ref": {
            "type": "string",
            "description": "Merchant order ID for external reference.\n\nUse this field to set the ID that your own system can use to easily track orders."
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the [customer](https://developer.revolut.com/docs/merchant/customers) associated with this order."
          },
          "email": {
            "type": "string",
            "description": "The email of the customer.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer."
          },
          "order_amount": {
            "type": "object",
            "description": "The amount and currency of the order.",
            "required": [
              "value",
              "currency"
            ],
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the order (minor currency unit). For example, enter `7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the order. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
              }
            }
          },
          "order_outstanding_amount": {
            "type": "object",
            "description": "The amount and currency outstanding to be paid for this order.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the order (minor currency unit) that is outstanding. For example, enter `7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the amount that is outstanding. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
              }
            }
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "required": [
          "id",
          "type",
          "state",
          "created_at",
          "updated_at",
          "order_amount"
        ],
        "description": "The `Order` object returned when you retrieve a list of orders."
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "errorId": {
            "type": "string",
            "description": "The ID of the error. You can share this ID with Revolut support for troubleshooting."
          },
          "timestamp": {
            "type": "integer",
            "description": "The date and time the error happened."
          }
        },
        "required": [
          "errorId",
          "timestamp"
        ]
      },
      "Order-Refund": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The amount of the refund (minor currency unit). For example, enter `7034` for €70.34 in the field.\n\nThis amount can't exceed the remaining amount of the original order. To get the refundable amount, subtract the `value` of the `refunded_amount` from the `value` of the `order_amount` in the original order. See [Retrieve an order](https://developer.revolut.com/docs/merchant/retrieve-order)."
          },
          "description": {
            "type": "string",
            "description": "The description of the refund."
          },
          "merchant_order_ext_ref": {
            "$ref": "#/components/schemas/Merchant-Order-External-Reference"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "amount"
        ]
      },
      "Capture-Mode": {
        "type": "string",
        "description": "The capture mode of the order. `AUTOMATIC` is used by default.\n\n- `AUTOMATIC`: The order is captured automatically after payment authorisation.\n- `MANUAL`: The order is not captured automatically. You must manually capture the order later.\n\nFor more information, see [Capture an order](https://developer.revolut.com/docs/merchant/capture-order).",
        "enum": [
          "AUTOMATIC",
          "MANUAL"
        ]
      },
      "Payment-Method": {
        "title": "Payment-Method",
        "type": "object",
        "description": "The details of the payment method used to make the payment.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment method. This value is present only if the payment method was previously saved.",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "description": "The type of the payment.",
            "enum": [
              "CARD",
              "REVOLUT"
            ]
          },
          "card": {
            "type": "object",
            "description": "The details of the card. Only present for payments with `payment_method.type` = `CARD`.",
            "properties": {
              "card_brand": {
                "type": "string",
                "description": "The type of the card.",
                "enum": [
                  "VISA",
                  "MASTERCARD"
                ]
              },
              "funding": {
                "type": "string",
                "description": "The type of card funding.",
                "enum": [
                  "CREDIT",
                  "DEBIT",
                  "PREPAID"
                ]
              },
              "card_country": {
                "type": "string",
                "description": "The country where the card was issued."
              },
              "card_bin": {
                "type": "string",
                "description": "The BIN of the card.",
                "minLength": 6,
                "maxLength": 6
              },
              "card_last_four": {
                "type": "string",
                "description": "The last four digits of the card.",
                "minLength": 4,
                "maxLength": 4
              },
              "card_expiry": {
                "type": "string",
                "description": "The expiry date of the card in the format of MM/YY."
              },
              "cardholder_name": {
                "type": "string",
                "description": "The name of the cardholder."
              },
              "checks": {
                "type": "object",
                "description": "The details of the check for card payment. Only for orders with successful payments.",
                "properties": {
                  "three_ds": {
                    "type": "object",
                    "description": "The details of the 3D Secure check. Only for orders with successful payments.",
                    "properties": {
                      "state": {
                        "type": "string",
                        "description": "The result of 3D Secure check.",
                        "enum": [
                          "VERIFIED",
                          "FAILED",
                          "CHALLENGE"
                        ]
                      },
                      "version": {
                        "type": "integer",
                        "description": "The 3D Secure version."
                      }
                    }
                  },
                  "cvv_verification": {
                    "type": "string",
                    "description": "The result of CVV verification.\n\n| Verification result | Description | \n| ------------------- | ----------- |\n| `MATCH` | Provided CVV matches the card's CVV |\n| `NOT_MATCH` | Provided CVV does not match the card's CVV |\n| `INCORRECT` | Provided CVV format is incorrect for this type of card |\n| `NOT_PROCESSED` | CVV verification was not performed |",
                    "enum": [
                      "MATCH",
                      "NOT_MATCH",
                      "INCORRECT",
                      "NOT_PROCESSED"
                    ]
                  },
                  "address": {
                    "type": "string",
                    "description": "The result of address verification.",
                    "enum": [
                      "MATCH",
                      "NOT_MATCH",
                      "N_A",
                      "INVALID"
                    ]
                  },
                  "postcode": {
                    "type": "string",
                    "description": "The result of postcode verification.",
                    "enum": [
                      "MATCH",
                      "NOT_MATCH",
                      "N_A",
                      "INVALID"
                    ]
                  },
                  "cardholder": {
                    "type": "string",
                    "description": "The result of cardholder verification.",
                    "enum": [
                      "MATCH",
                      "NOT_MATCH",
                      "N_A",
                      "INVALID"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment."
          },
          "state": {
            "type": "string",
            "description": "The state of the payment.",
            "enum": [
              "PROCESSING",
              "AUTHORISED",
              "CAPTURED",
              "COMPLETED",
              "FAILED",
              "DECLINED",
              "CANCELLED"
            ]
          },
          "failure_reason": {
            "type": "string",
            "description": "The reason for a `FAILED` or `DECLINED` payment.\n\n\nA failed or declined payment can result from multiple reasons. To learn\nmore, check our [decline\nreasons](https://developer.revolut.com/docs/guides/accept-payments/other-resources/errors/decline-reasons).",
            "enum": [
              "do_not_honour",
              "3ds_challenge_abandoned",
              "3ds_challenge_failed",
              "3ds_challenge_failed_manually",
              "insufficient_funds",
              "transaction_not_allowed_for_cardholder",
              "high_risk",
              "cardholder_name_missing",
              "unknown_card",
              "invalid_card",
              "invalid_email",
              "restricted_card",
              "expired_card",
              "rejected_by_customer",
              "withdrawal_limit_exceeded",
              "pick_up_card",
              "invalid_amount"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the payment was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the payment was last updated.",
            "format": "date-time"
          },
          "token": {
            "type": "string",
            "description": "Temporary token of the payment used to fetch the reward offer during\ncheckout and link user registrations to the given offers. \n\n\nThe token is only valid for a limited time."
          },
          "amount": {
            "type": "object",
            "description": "The amount and currency of the payment.",
            "required": [
              "value",
              "currency"
            ],
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the payment (minor currency unit). For example, enter\n`7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the payment. [ISO\n4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper\ncase.\n\n\n:::info\n\nFor more information about the supported currencies, see: [Help\nCenter](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n\n:::"
              }
            }
          },
          "settled_amount": {
            "type": "object",
            "description": "The amount and currency of the settled payment.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the settled payment (minor currency unit). For example,\nenter `7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the settled payment. [ISO\n4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper\ncase.\n\n\n:::info\n\nFor more information about the supported currencies, see: [Help\nCenter](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n\n:::"
              }
            }
          },
          "payment_method": {
            "$ref": "#/components/schemas/Payment-Method"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "risk_level": {
            "type": "string",
            "description": "The risk level of the card.\n\nIf the risk level is `HIGH`, the payment might be declined.",
            "enum": [
              "LOW",
              "HIGH"
            ]
          },
          "fees": {
            "type": "array",
            "description": "The details of the order fee.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the order fee.",
                  "enum": [
                    "FX",
                    "ACQUIRING"
                  ]
                },
                "amount": {
                  "type": "object",
                  "description": "The amount and currency of the payment fee.",
                  "properties": {
                    "value": {
                      "type": "integer",
                      "description": "The amount of the payment fee (minor currency unit). For\nexample, enter `7034` for €70.34 in the field."
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency of the payment fee. [ISO\n4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in\nupper case.\n\n\n:::info\n\nFor more information about the supported currencies, see: [Help\nCenter](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n\n:::"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "state",
          "created_at",
          "updated_at",
          "amount"
        ]
      },
      "Order-Related": {
        "title": "Order-Related",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the related order. You can use this ID to get more information about the related order using the [Retrieve an order](https://developer.revolut.com/docs/merchant/retrieve-order) operation."
          },
          "type": {
            "type": "string",
            "description": "The type of the related order.",
            "enum": [
              "PAYMENT",
              "REFUND",
              "CHARGEBACK"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the related order.",
            "enum": [
              "PENDING",
              "PROCESSING",
              "AUTHORISED",
              "COMPLETED",
              "CANCELLED",
              "FAILED"
            ]
          },
          "amount": {
            "type": "object",
            "description": "The amount and currency of the related order.",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/Order-Amount"
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          }
        }
      },
      "Merchant-Order-Uri": {
        "type": "string",
        "description": "The URI of the order stored in the merchant's order management system.\n\nThis URI will be included in the order confirmation email for payments made via Revolut Pay. If specified, this URI will override the default link to the merchant's **Business website** configured in the Revolut Business account.\n\n:::caution\nRestrictions:\n- Max length of `merchant_order_uri` string: `2000`\n- Only valid `http://` or `https://` domains are accepted\n- Domain cannot be `localhost` or IP address\n:::",
        "maxLength": 2000
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "description": "An Order object helps you through the process of accepting payments from your customers.\n\nCreate an order for every customer session or while an order is being created in your own system. Then, the order goes through multiple states using the [Revolut Checkout Widget](https://developer.revolut.com/docs/sdks/merchant-web-sdk/install-widget) to collect payments from your customers.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Order-Id"
          },
          "public_id": {
            "type": "string",
            "description": "Temporary ID for the order. \n\nIt expires when the payment is authorized."
          },
          "type": {
            "type": "string",
            "description": "The type of the order.",
            "enum": [
              "PAYMENT",
              "REFUND",
              "CHARGEBACK"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the order.\n\n:::info\nFor more information about the order lifecycle, see: [Order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/other-resources/order-payment-flow).\n:::",
            "enum": [
              "PENDING",
              "PROCESSING",
              "AUTHORISED",
              "COMPLETED",
              "CANCELLED",
              "FAILED"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the order was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the order was last updated.",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "description": "The date and time the order was completed.",
            "format": "date-time"
          },
          "description": {
            "$ref": "#/components/schemas/Order-Description"
          },
          "capture_mode": {
            "$ref": "#/components/schemas/Capture-Mode"
          },
          "settlement_currency": {
            "$ref": "#/components/schemas/Settlement-Currency"
          },
          "merchant_order_ext_ref": {
            "$ref": "#/components/schemas/Merchant-Order-External-Reference"
          },
          "customer_id": {
            "type": "string",
            "description": "The ID of the [customer](https://developer.revolut.com/docs/merchant/customers) associated with this order."
          },
          "email": {
            "type": "string",
            "description": "The email of the customer.",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer."
          },
          "full_name": {
            "type": "string",
            "description": "The customer's full name."
          },
          "order_amount": {
            "type": "object",
            "description": "The amount and currency of the order.",
            "required": [
              "value",
              "currency"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/Order-Amount"
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              }
            }
          },
          "order_outstanding_amount": {
            "type": "object",
            "description": "The amount and currency outstanding to be paid for this order.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the order (minor currency unit) that is outstanding. For example, enter `7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the amount that is outstanding. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
              }
            }
          },
          "refunded_amount": {
            "type": "object",
            "description": "The amount and currency of the refunded order.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The amount of the refunded order (minor currency unit). For example, enter `7034` for €70.34 in the field."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the refunded order. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::"
              }
            }
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "payments": {
            "type": "array",
            "description": "The details of all the payment attempts that have been made towards this order (successful or unsuccessful).",
            "items": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "related": {
            "type": "array",
            "description": "The details of related orders. You can use the ID of the related order to [Retrieve the order information](https://developer.revolut.com/docs/merchant/retrieve-order).",
            "items": {
              "$ref": "#/components/schemas/Order-Related"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "checkout_url": {
            "$ref": "#/components/schemas/Checkout-Url"
          },
          "merchant_order_uri": {
            "$ref": "#/components/schemas/Merchant-Order-Uri"
          }
        },
        "required": [
          "id",
          "type",
          "state",
          "created_at",
          "updated_at",
          "order_amount"
        ]
      },
      "RPay-Account": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "card",
              "revolut_pay"
            ],
            "description": "The type of payment method used to pay for the order."
          },
          "subtype": {
            "type": "string",
            "enum": [
              "revolut_account",
              "card"
            ],
            "description": "Indicates whether the customer used their card or Revolut account via Revolut Pay."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned if the payment method is saved.\n:::"
          }
        },
        "required": [
          "type",
          "subtype"
        ]
      },
      "RPay-Card": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "card",
              "revolut_pay"
            ],
            "description": "The type of payment method used to pay for the order."
          },
          "subtype": {
            "type": "string",
            "enum": [
              "revolut_account",
              "card"
            ],
            "description": "Indicates whether the customer used their card or Revolut account via Revolut Pay."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned if the payment method is saved.\n:::"
          },
          "brand": {
            "type": "string",
            "description": "The type of the card."
          },
          "last_four": {
            "type": "string",
            "description": "The last four digits of the card number."
          }
        },
        "required": [
          "type",
          "subtype"
        ]
      },
      "Revolut-Pay": {
        "discriminator": {
          "propertyName": "subtype",
          "mapping": {
            "revolut_pay_account": "#/components/schemas/RPay-Account",
            "revolut_pay_card": "#/components/schemas/RPay-Card"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RPay-Account"
          },
          {
            "$ref": "#/components/schemas/RPay-Card"
          }
        ]
      },
      "Card-For-Payment-Details": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "card",
              "revolut_pay"
            ],
            "description": "The type of payment method used to pay for the order."
          },
          "brand": {
            "type": "string",
            "description": "The type of the card."
          },
          "last_four": {
            "type": "string",
            "description": "The last four digits of the card number."
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the saved payment method.\n\n:::note\nThe `id` parameter is only returned if the payment method is saved.\n:::"
          }
        },
        "required": [
          "type"
        ]
      },
      "Payment-Retrieval": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "order_id": {
            "$ref": "#/components/schemas/Order-Id"
          },
          "payment_method": {
            "type": "object",
            "description": "The payment method used to pay for the order.",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "revolut_pay": "#/components/schemas/Revolut-Pay",
                "card": "#/components/schemas/Card-For-Payment-Details"
              }
            },
            "oneOf": [
              {
                "$ref": "#/components/schemas/Revolut-Pay"
              },
              {
                "$ref": "#/components/schemas/Card-For-Payment-Details"
              }
            ]
          },
          "state": {
            "$ref": "#/components/schemas/Payment-State-v2"
          },
          "authentication_challenge": {
            "$ref": "#/components/schemas/Authentication-Challenge"
          }
        },
        "required": [
          "id",
          "order_id",
          "payment_method"
        ]
      },
      "Browser-Environment": {
        "type": "object",
        "description": "Browser environment",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "browser"
            ],
            "example": "browser",
            "description": "Type of environment where the payment was made."
          },
          "time_zone_utc_offset": {
            "type": "integer",
            "example": 180,
            "description": "Defines the offset to UTC in minutes."
          },
          "color_depth": {
            "type": "integer",
            "example": 32,
            "description": "The browser's available colour depth."
          },
          "screen_width": {
            "type": "integer",
            "example": 1920,
            "description": "The browser's screen width in pixels."
          },
          "screen_height": {
            "type": "integer",
            "example": 1080,
            "description": "The browser's screen height in pixels."
          },
          "java_enabled": {
            "type": "boolean",
            "example": false,
            "description": "Indicates if the browser has Java enabled."
          },
          "challenge_window_width": {
            "type": "integer",
            "example": 640,
            "description": "Defines the width of the pop-up window where the authentication challenge appears."
          },
          "browser_url": {
            "type": "string",
            "format": "url",
            "example": "https://business.revolut.com",
            "description": "The URL of the page where the payment was initiated."
          }
        },
        "required": [
          "type",
          "time_zone_utc_offset",
          "color_depth",
          "screen_width",
          "screen_height",
          "java_enabled"
        ]
      },
      "Environment": {
        "description": "Environment object, indicating in which environment the payment was made.\n\n:::caution\nOnly required if `initiator: customer`.\n:::\n\n:::note\nOnly `browser` is available at the moment.\n:::",
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "browser": "#/components/schemas/Browser-Environment"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Browser-Environment"
          }
        ]
      },
      "Saved-Payment-Method": {
        "type": "object",
        "properties": {
          "saved_payment_method": {
            "type": "object",
            "description": "Object containing information about the saved payment method used to pay for the order.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "card",
                  "revolut_pay"
                ],
                "description": "Type of saved payment method.",
                "example": "card"
              },
              "id": {
                "type": "string",
                "description": "Saved payment method ID."
              },
              "initiator": {
                "type": "string",
                "description": "Indicates who is allowed to initiate the payment. \n\n:::note\nUsing this endpoint, only merchant initiated payments are supported with Revolut Pay.\n:::",
                "enum": [
                  "customer",
                  "merchant"
                ],
                "example": "customer"
              },
              "environment": {
                "$ref": "#/components/schemas/Environment"
              }
            },
            "required": [
              "type",
              "id",
              "initiator",
              "environment"
            ]
          }
        },
        "required": [
          "saved_payment_method"
        ]
      },
      "Customer": {
        "title": "Customer",
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "description": "Permanent customer ID used to retrieve, update, and delete a customer."
          },
          "full_name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "business_name": {
            "type": "string",
            "description": "The name of the customer's business."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer in [E.164 format](https://en.wikipedia.org/wiki/E.164)."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the customer was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The data and time the customer was last updated.",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer.",
            "format": "email"
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/Date-Of-Birth"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email"
        ]
      },
      "Customer-Creation": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "business_name": {
            "type": "string",
            "description": "The name of the customer's business."
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer. \n\n:::note\nUniqueness of customer's email address is not enforced. This means, you can create multiple customer objects with the same email address.\n:::",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer in [E.164 format](https://en.wikipedia.org/wiki/E.164)."
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/Date-Of-Birth"
          }
        }
      },
      "Customer-Payment-Method": {
        "title": "Payment method object",
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the payment method."
          },
          "type": {
            "type": "string",
            "enum": [
              "CARD",
              "REVOLUT_PAY"
            ],
            "description": "The type of the payment method.\n\n:::note\nOnly merchant initiated transactions are supported for saved `REVOLUT_PAY` payment methods.\n:::"
          },
          "saved_for": {
            "type": "string",
            "enum": [
              "CUSTOMER",
              "MERCHANT"
            ],
            "description": "Indicates in which case this saved payment method can be used for payments.\n\n\n- `CUSTOMER`: This payment method can be used only when the customer is on the checkout page.\n- `MERCHANT`: This payment method can be used without the customer being on the checkout page, and the merchant can initiate transactions, for example, to take payments for recurring transactions."
          },
          "method_details": {
            "type": "object",
            "description": "The details of the payment method.",
            "properties": {
              "bin": {
                "type": "string",
                "maxLength": 6,
                "minLength": 6,
                "description": "The BIN of the payment card."
              },
              "last4": {
                "type": "string",
                "maxLength": 4,
                "minLength": 4,
                "description": "The last four digits of the payment card."
              },
              "expiry_month": {
                "type": "number",
                "description": "The expiry month of the payment card."
              },
              "expiry_year": {
                "type": "number",
                "description": "The expiry year of the payment card."
              },
              "cardholder_name": {
                "type": "string",
                "description": "The name of the cardholder."
              },
              "billing_address": {
                "type": "object",
                "description": "The billing address of the payment method.",
                "properties": {
                  "street_line_1": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Street line 1 information."
                  },
                  "street_line_2": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Street line 2 information."
                  },
                  "post_code": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The postcode associated with the address."
                  },
                  "city": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The city associated with the address."
                  },
                  "region": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The region associated with the address."
                  },
                  "country_code": {
                    "type": "string",
                    "minLength": 1,
                    "description": "The country associated with the address."
                  }
                }
              },
              "brand": {
                "type": "string",
                "description": "The brand of the payment card.",
                "enum": [
                  "VISA",
                  "MASTERCARD",
                  "MAESTRO"
                ]
              },
              "funding": {
                "type": "string",
                "enum": [
                  "DEBIT",
                  "CREDIT",
                  "PREPAID",
                  "DEFERRED_DEBIT",
                  "CHARGE"
                ],
                "description": "The funding type of the payment card."
              },
              "issuer": {
                "type": "string",
                "description": "The issuer of the payment card."
              },
              "issuer_country": {
                "type": "string",
                "description": "Two-letter country code of the country where the payment card was issued."
              },
              "created_at": {
                "type": "string",
                "description": "The date and time the payment card was added.",
                "format": "date-time"
              }
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "Customer-With-Payment-Method": {
        "title": "Customer object with Payment Method object",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Permanent customer ID used to retrieve, update, and delete a customer."
          },
          "full_name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "business_name": {
            "type": "string",
            "description": "The name of the customer's business."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer in [E.164 format](https://en.wikipedia.org/wiki/E.164)."
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the customer was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "The data and time the customer was last updated.",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer.",
            "format": "email"
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/Date-Of-Birth"
          },
          "payment_methods": {
            "type": "array",
            "uniqueItems": false,
            "description": "All the payment methods for this customer.",
            "items": {
              "$ref": "#/components/schemas/Customer-Payment-Method"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email"
        ]
      },
      "Customer-Update": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "business_name": {
            "type": "string",
            "description": "The name of the customer's business."
          },
          "email": {
            "type": "string",
            "description": "The email address of the customer. \n\n:::note\nThis value must be unique for each customer for one merchant. If the email address matches an existing customer, an error is returned.\n:::",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the customer in [E.164 format](https://en.wikipedia.org/wiki/E.164)."
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/Date-Of-Birth"
          }
        }
      },
      "Payout-Id": {
        "type": "string",
        "format": "uuid",
        "description": "Permanent payout ID used for payouts operations."
      },
      "Payout-State": {
        "type": "string",
        "enum": [
          "processing",
          "completed",
          "failed"
        ],
        "description": "The state of the payout."
      },
      "Payout-Destination-Type": {
        "type": "string",
        "enum": [
          "current_pocket",
          "external_beneficiary"
        ],
        "description": "The destination of the payout funds when a merchant initiates a withdrawal from their merchant account.\n\n| Destination type | Description |\n| ---------------- | ----------- |\n| `current_pocket` | The funds were moved from the merchant account to the business account within the platform. This indicates an **internal transfer**, allowing the merchant to access the funds within their own business account. |\n| `external_beneficiary` | The funds were transferred to an external bank account or beneficiary outside the platform. This indicates a **transfer to an external account**, enabling the merchant to withdraw funds to external financial institutions. |"
      },
      "Payout-Amount": {
        "type": "integer",
        "minimum": 1,
        "description": "The total amount of the payout in minor currency units. For example, `7034` represents €70.34."
      },
      "Payout": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payout-Id"
          },
          "state": {
            "$ref": "#/components/schemas/Payout-State"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the payout was created."
          },
          "destination_type": {
            "$ref": "#/components/schemas/Payout-Destination-Type"
          },
          "amount": {
            "$ref": "#/components/schemas/Payout-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        },
        "required": [
          "id",
          "state",
          "created_at",
          "destination_type"
        ]
      },
      "Report-Run-From": {
        "type": "string",
        "format": "date-time",
        "description": "This parameter specifies the start boundary for filtering transaction data in the report based on an order's `payments.created_at` parameter. It accepts ETC/UTC date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) and includes all transactions created on or after this timestamp.\n\nCombined with the `to` parameter, this determines the report's timeframe, including all transactions between the two values. \n\nFor example, by setting the `from` parameter to `2021-01-01T00:00:00Z`, the report will include transactions created from the first second of January 1, 2021, UTC, and onwards."
      },
      "Report-Run-To": {
        "type": "string",
        "format": "date-time",
        "description": "This parameter specifies the end boundary for filtering transaction data in the report based on an order's `payments.created_at` parameter. It accepts ETC/UTC date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) and includes all transactions created before this timestamp (exclusive). \n\nCombined with the `from` parameter, this determines the timeframe for the report, including all transactions between the two values. \n\nFor example, setting the `to` parameter to `2021-12-31T23:59:59Z` will include all transactions in the report created up to, but not including, the last second of December 31, 2021, UTC."
      },
      "Report-Run-Entity-Types": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "payment",
            "refund",
            "dispute"
          ]
        },
        "description": "Select transactions by type to be included in the report."
      },
      "Report-Run-Entity-States": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "completed",
            "failed",
            "declined",
            "processing",
            "cancelled",
            "reverted"
          ]
        },
        "description": "Select transactions by state to be included in the report.\n\nIf not provided, only `completed` transactions will be included in the report."
      },
      "Report-Run-Currency": {
        "type": "string",
        "description": "Select transactions with specific currencies to include in the report. Provide [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code in upper case.\n\n:::info\nFor more information about the supported currencies, see: [Help Center](https://help.revolut.com/business/help/merchant-accounts/payments/in-which-currencies-can-i-accept-payments/).\n:::",
        "example": "GBP",
        "minLength": 3,
        "maxLength": 3
      },
      "Report-Run-Location-Id": {
        "type": "string",
        "format": "uuid",
        "description": "Select transactions by location ID to be included in the report.\n\n:::info\nFor more information, see: [Locations](https://developer.revolut.com/docs/merchant/locations).\n:::        "
      },
      "Report-Run-Filter": {
        "type": "object",
        "description": "List of filtering parameters to be applied to the report.",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Report-Run-From"
          },
          "to": {
            "$ref": "#/components/schemas/Report-Run-To"
          },
          "entity_types": {
            "$ref": "#/components/schemas/Report-Run-Entity-Types"
          },
          "entity_states": {
            "$ref": "#/components/schemas/Report-Run-Entity-States"
          },
          "currency": {
            "$ref": "#/components/schemas/Report-Run-Currency"
          },
          "location_id": {
            "$ref": "#/components/schemas/Report-Run-Location-Id"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "Report-Run-Format": {
        "type": "string",
        "enum": [
          "csv"
        ],
        "description": "Format of the generated report file.",
        "example": "csv"
      },
      "Report-Run-Type": {
        "type": "string",
        "description": "Type of the report.\n\nPossible values:\n\n  | Type of report | Description |\n  | -------------- | ----------- |\n  | `settlement_report` | Settlement report is a report including transactions settled to the user account. This parameter sets the predefined `options` and list of represented columns. |\n  | `custom_report` | Custom reports require users to define `options`. |\n  | `payout_statement_report`    | Payout statement Reports provide a detailed breakdown of all transactions contributing to a specific payout amount. It requires the additional parameter `filter.payout_id`, which should be obtained from the payout ID retrieved via the [payout list endpoint](https://developer.revolut.com/docs/merchant/retrieve-payout-list) or from [webhook events](https://developer.revolut.com/docs/merchant/create-webhook#callbacks). |\n  | `icpp_fee_breakdown_report`  | IC++ fee breakdown reports provide a detailed breakdown of fees for each IC++ transaction related to a payout. It requires the additional parameter `filter.icpp_charge_id`, which should be obtained from the `related_icpp_charge_id` column in the Payout statement report. A separate report should be generated for each IC++ transaction. |",
        "enum": [
          "settlement_report",
          "custom_report",
          "payout_statement_report",
          "icpp_fee_breakdown_report"
        ],
        "example": "settlement_report"
      },
      "Report-Run-Options": {
        "type": "object",
        "description": "Further options to customize the report.",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "Defaults to `ETC/UTC`. Defines the output timezone for all timestamps displayed in the report. \n\nHas no effect on `from` or `to` parameters.",
            "example": "Europe/London"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Names of the columns to be included in the report.\n\nIf the `columns` parameter is not defined in the request, all available columns will be included in the report. An empty array will return an error.\n\nIf you created orders using the `metadata` object, you can include them in the report by adding them with `metadata.` prefix. For example: `metadata.custom_attribute`.\n\nAvailable columns:\n\n  | Column name | Description |\n  | ----------- | ----------- |\n  | `transaction_id` | Unique identifier of the transaction related to an order. |\n  | `order_id` | Unique identifier of the order. |\n  | `started_date` | Date and time the transaction was created. |\n  | `updated_date` | Date and time the transaction was last updated. |\n  | `completed_date` | Date and time the transaction was completed. |\n  | `type` | Type of the order. |\n  | `state` | State of the order. |\n  | `description` | Description of the order. |\n  | `merchant_order_ext_ref` | Merchant's order identifier for external reference. |\n  | `customer_id` | Unique identifier of the customer related to an order. |\n  | `amount` | Total amount of the order. |\n  | `currency` | The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code that represents the currency of the order. |\n  | `settlement_amount` | Total amount settled on the merchant's account. |\n  | `settlement_currency` | The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code that represents the currency of the settled amount. |\n  | `fee_amount` | Total amount of extra fees applied to the order. |\n  | `fee_currency` | The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code that represents the currency of extra fees. |\n  | `processing_fee_amount` | Total amount of processing fees applied to the order. |\n  | `processing_fee_currency` | The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code that represents the currency of processing fees. |\n  | `payment_method` | Type of the payment method the customer used to pay for the order. |\n  | `browser_url` | The URL where the customer initiated the payment. |\n  | `related_icpp_charge_id` | Unique identifier of the IC++ charge related to the transaction. **This column is only available in the `payout_statement_report`.** |\n  | `location_id` | Unique identifier of the location related to the transaction. **This column is only available in `settlement_report` and `custom_report`.** |",
            "example": [
              "transaction_id",
              "amount",
              "metadata.custom_attribute"
            ]
          }
        }
      },
      "Report-Run-Settlement-Report": {
        "title": "Settlement report",
        "type": "object",
        "description": "A settlement report contains all the query information for generating reports of settled transactions associated with a Merchant account.",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Report-Run-Filter"
          },
          "format": {
            "$ref": "#/components/schemas/Report-Run-Format"
          },
          "type": {
            "$ref": "#/components/schemas/Report-Run-Type"
          },
          "options": {
            "$ref": "#/components/schemas/Report-Run-Options"
          }
        },
        "required": [
          "filter",
          "format",
          "type"
        ]
      },
      "Report-Run-Custom-Report": {
        "title": "Custom report",
        "type": "object",
        "description": "A custom report contains all the query information for generating reports of selected transactions associated with a Merchant account.",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Report-Run-Filter"
          },
          "format": {
            "$ref": "#/components/schemas/Report-Run-Format"
          },
          "type": {
            "$ref": "#/components/schemas/Report-Run-Type"
          },
          "options": {
            "$ref": "#/components/schemas/Report-Run-Options"
          }
        },
        "required": [
          "filter",
          "format",
          "type"
        ]
      },
      "Report-Run-Payout-Filter": {
        "type": "object",
        "description": "List of filtering parameters to be applied to the report.",
        "properties": {
          "payout_id": {
            "$ref": "#/components/schemas/Payout-Id"
          }
        },
        "required": [
          "payout_id"
        ]
      },
      "Report-Run-Payout-Report": {
        "title": "Payout settlement report",
        "type": "object",
        "description": "A payout settlement report contains all the query information for generating reports of a selected payout associated with a Merchant account.",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Report-Run-Payout-Filter"
          },
          "format": {
            "$ref": "#/components/schemas/Report-Run-Format"
          },
          "type": {
            "$ref": "#/components/schemas/Report-Run-Type"
          },
          "options": {
            "$ref": "#/components/schemas/Report-Run-Options"
          }
        },
        "required": [
          "filter",
          "format",
          "type"
        ]
      },
      "Icpp-Charge-Id": {
        "type": "string",
        "format": "uuid",
        "description": "Permanent ID of of the IC++ fee related to a payout transaction.\n\nThis ID can be obtained from the `related_icpp_charge_id` column of a payout statement report."
      },
      "Report-Run-Icpp-Filter": {
        "type": "object",
        "description": "List of filtering parameters to be applied to the report.",
        "properties": {
          "icpp_charge_id": {
            "$ref": "#/components/schemas/Icpp-Charge-Id"
          }
        },
        "required": [
          "icpp_charge_id"
        ]
      },
      "Report-Run-Icpp-Report": {
        "title": "IC++ fee breakdown report",
        "type": "object",
        "description": "A IC++ fee breakdown report contains all the query information for generating reports of fees for each IC++ transaction related to a payout.",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Report-Run-Icpp-Filter"
          },
          "format": {
            "$ref": "#/components/schemas/Report-Run-Format"
          },
          "type": {
            "$ref": "#/components/schemas/Report-Run-Type"
          },
          "options": {
            "$ref": "#/components/schemas/Report-Run-Options"
          }
        },
        "required": [
          "filter",
          "format",
          "type"
        ]
      },
      "Report-Run-Details": {
        "title": "ReportRunDetails",
        "type": "object",
        "description": "The `ReportRunDetails` object contains all information associated with a specific report run, identified by the `report_run_id`.",
        "properties": {
          "report_run_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID used for accessing report details. Use this to check report generation status."
          },
          "status": {
            "type": "string",
            "description": "Current status of the report run.",
            "enum": [
              "processing",
              "completed",
              "failed",
              "expired"
            ]
          },
          "file_url": {
            "type": "string",
            "description": "Use this link to download report file. Not available, until `status` is `completed`."
          }
        },
        "required": [
          "report_run_id",
          "status"
        ]
      },
      "Report-Run-Error": {
        "title": "Report run error",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "An identifier that can be used to determine what went wrong.\n\nError codes are not globally unique, but uniqueness is guaranteed within\nendpoints."
          },
          "message": {
            "type": "string",
            "description": "Some human readable text describing what went wrong."
          },
          "timestamp": {
            "type": "integer",
            "description": "The date and time the error happened."
          }
        },
        "required": [
          "code",
          "message",
          "timestamp"
        ]
      },
      "Webhook-Id": {
        "type": "string",
        "format": "uuid",
        "description": "The ID of the webhook."
      },
      "Webhook-Url": {
        "type": "string",
        "maxLength": 2000,
        "description": "Your webhook's URL to which event notifications will be sent. \n\nMust be a valid HTTP or HTTPS URL, capable of receiving `POST` requests.\n\n:::caution\nRestrictions:\n- Max length of `url` string: `2000`\n- Only valid `http://` or `https://` domains are accepted\n- Domain cannot be `localhost` or IP address\n:::"
      },
      "Webhook-Events": {
        "type": "array",
        "description": "List of event types that the webhook is configured to listen to.\n\nEach event is related to status changes of a specific object in the Merchant API:\n\n  | Object | Event types |\n  | --------- | ----------- |\n  | `Order`   | <ul> <li>`ORDER_COMPLETED`</li> <li>`ORDER_AUTHORISED`</li> <li>`ORDER_CANCELLED`</li> </ul> |\n  | `Payment` | <ul> <li>`ORDER_PAYMENT_AUTHENTICATED`</li> <li>`ORDER_PAYMENT_DECLINED`</li> <li>`ORDER_PAYMENT_FAILED`</li> </ul> |\n  | `Payout`  | <ul> <li>`PAYOUT_INITIATED`</li> <li>`PAYOUT_COMPLETED`</li> <li>`PAYOUT_FAILED`</li> </ul> |\n  | `Dispute`  | <ul> <li>`DISPUTE_ACTION_REQUIRED`</li> <li>`DISPUTE_UNDER_REVIEW`</li> <li>`DISPUTE_WON`</li> <li>`DISPUTE_LOST`</li></ul> |",
        "items": {
          "type": "string",
          "description": "The available event types your can listen to.",
          "enum": [
            "ORDER_COMPLETED",
            "ORDER_AUTHORISED",
            "ORDER_CANCELLED",
            "ORDER_PAYMENT_AUTHENTICATED",
            "ORDER_PAYMENT_DECLINED",
            "ORDER_PAYMENT_FAILED",
            "PAYOUT_INITIATED",
            "PAYOUT_COMPLETED",
            "PAYOUT_FAILED",
            "DISPUTE_ACTION_REQUIRED",
            "DISPUTE_UNDER_REVIEW",
            "DISPUTE_WON",
            "DISPUTE_LOST"
          ]
        },
        "minItems": 1
      },
      "Webhook": {
        "title": "Webhook",
        "type": "object",
        "description": "A `webhook` (also called a web callback) allows your system to receive an event from a different app immediately after it happens. \n\nFor example, you can subscribe to a webhook when an order changes from Pending to Completed. When the payment is cleared and the order is completed, Revolut servers will send a notification to the URL of your choice. This is a much more efficient way to know when an order is paid as opposed to trying to get the status of the order every few seconds.\n\nMany events that happen to a Revolut Merchant account are synchronous, which means that they arrive instantly and have immediate results. For example, a successful request to create a customer immediately returns a Customer object. Such requests don't require webhooks.\n\nThe Revolut Merchant API supports webhooks for events such as `ORDER_COMPLETED` and `ORDER_AUTHORISED`.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Webhook-Id"
          },
          "url": {
            "$ref": "#/components/schemas/Webhook-Url"
          },
          "events": {
            "$ref": "#/components/schemas/Webhook-Events"
          }
        },
        "required": [
          "id"
        ]
      },
      "Webhook-Creation": {
        "title": "Webhook schema for creation and update operations",
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/Webhook-Url"
          },
          "events": {
            "$ref": "#/components/schemas/Webhook-Events"
          }
        },
        "required": [
          "url",
          "events"
        ]
      },
      "Webhook-Signing-Secret": {
        "type": "string",
        "description": "The signing secret for the webhook. Use it to verify the signature for the webhook request's payload."
      },
      "Webhook-With-Signing-Secret": {
        "title": "Webhook with signing secret",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Webhook-Id"
          },
          "url": {
            "$ref": "#/components/schemas/Webhook-Url"
          },
          "events": {
            "$ref": "#/components/schemas/Webhook-Events"
          },
          "signing_secret": {
            "$ref": "#/components/schemas/Webhook-Signing-Secret"
          }
        },
        "required": [
          "id",
          "signing_secret"
        ]
      },
      "Webhook-Callback-Event": {
        "type": "string",
        "enum": [
          "ORDER_COMPLETED",
          "ORDER_AUTHORISED",
          "ORDER_CANCELLED",
          "ORDER_PAYMENT_AUTHENTICATED",
          "ORDER_PAYMENT_DECLINED",
          "ORDER_PAYMENT_FAILED",
          "PAYOUT_INITIATED",
          "PAYOUT_COMPLETED",
          "PAYOUT_FAILED",
          "DISPUTE_ACTION_REQUIRED",
          "DISPUTE_UNDER_REVIEW",
          "DISPUTE_WON",
          "DISPUTE_LOST"
        ],
        "description": "The event type of the webhook notification that's sent by Revolut to your webhook URL.\n\nEach event is related to status changes of a specific object in the Merchant API:\n\n  | Object | Event types |\n  | --------- | ----------- |\n  | `Order`   | <ul> <li>`ORDER_COMPLETED`</li> <li>`ORDER_AUTHORISED`</li> <li>`ORDER_CANCELLED`</li> </ul> |\n  | `Payment` | <ul> <li>`ORDER_PAYMENT_AUTHENTICATED`</li> <li>`ORDER_PAYMENT_DECLINED`</li> <li>`ORDER_PAYMENT_FAILED`</li> </ul> |\n  | `Payout`  | <ul> <li>`PAYOUT_INITIATED`</li> <li>`PAYOUT_COMPLETED`</li> <li>`PAYOUT_FAILED`</li> </ul> |\n  | `Dispute`  | <ul> <li>`DISPUTE_ACTION_REQUIRED`</li> <li>`DISPUTE_UNDER_REVIEW`</li> <li>`DISPUTE_WON`</li> <li>`DISPUTE_LOST`</li></ul> |"
      },
      "Webhook-Order-Event": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/Webhook-Callback-Event"
          },
          "order_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the order the event is related to."
          },
          "merchant_order_ext_ref": {
            "type": "string",
            "description": "The information sent during order creation in the\n`merchant_order_data.reference` field."
          }
        },
        "required": [
          "event",
          "order_id"
        ]
      },
      "Webhook-Payout-Event": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/Webhook-Callback-Event"
          },
          "payout_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the payout the event is related to."
          }
        },
        "required": [
          "event",
          "payout_id"
        ]
      },
      "Webhook-Dispute-Event": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/Webhook-Callback-Event"
          },
          "dispute_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the dispute the event is related to."
          }
        },
        "required": [
          "event",
          "dispute_id"
        ]
      },
      "Synchronous-Webhook": {
        "title": "SynchronousWebhook",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the synchronous webhook object."
          },
          "signing_key": {
            "type": "string",
            "pattern": "^swsk_[a-zA-Z0-9]{32}$",
            "description": "A randomly generated signing key, which can be used by merchants to authenticate requests from Revolut by verifying the signature. For more information, see: [Payload Signature](https://developer.revolut.com/docs/merchant/merchant-api#revolut-pay-payload-signature)."
          },
          "url": {
            "type": "string",
            "format": "^https:\\/{2}.+/gi",
            "description": "The valid URL of the endpoint, that uses the HTTPS URL schema. Revolut sends the shipping address of the customer to this URL for validation."
          },
          "event_type": {
            "type": "string",
            "enum": [
              "fast_checkout.validate_address"
            ],
            "description": "Type of event this synchronous webhook is configured for.\n\n:::note\nAt the moment, synchronous webhooks only support address validation events. \n:::"
          },
          "location_id": {
            "$ref": "#/components/schemas/Location-Id"
          }
        },
        "required": [
          "id",
          "signing_key",
          "url",
          "event_type"
        ]
      },
      "Synchronous-Webhook-Creation": {
        "title": "SynchronousWebhookCreation",
        "type": "object",
        "description": "The `SynchronousWebhook` object allows merchants to register endpoints on their backend for receiving predefined event types. Currently, only address validation events are available.\n\nIn addition, merchants can specify locations representing their online stores, enabling them to set up different webhooks for different stores.",
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "fast_checkout.validate_address"
            ],
            "description": "Type of event this synchronous webhook is configured for.\n\n:::note\nAt the moment, synchronous webhooks only support address validation events. \n:::"
          },
          "url": {
            "type": "string",
            "format": "^https:\\/{2}.+/gi",
            "description": "The valid URL of the endpoint, that uses the HTTPS URL schema. Revolut sends the shipping address of the customer to this URL for validation."
          },
          "location_id": {
            "$ref": "#/components/schemas/Location-Id"
          }
        },
        "required": [
          "event_type",
          "url"
        ]
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "description": "Location object represents merchant locations depending on type. For example, online locations represents merchant domains on which he sells products.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the location object."
          },
          "name": {
            "type": "string",
            "description": "Name of the location. \n\n:::caution\nThe `name` parameter's value must be unique across all locations.\n:::"
          },
          "type": {
            "type": "string",
            "description": "Type of the location.\n\n:::note\nCurrently only `online` locations are supported.\n:::",
            "enum": [
              "online"
            ]
          },
          "details": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain address of the location. Required for online locations.\n\n:::caution\nThe `domain` parameter's value must be unique across all locations.\n:::",
                "example": "example.com"
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "details"
        ]
      },
      "Location-Creation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the location. \n\n:::caution\nThe `name` parameter's value must be unique across all locations.\n:::"
          },
          "type": {
            "type": "string",
            "description": "Type of the location.\n\n:::note\nCurrently only `online` locations are supported.\n:::",
            "enum": [
              "online"
            ]
          },
          "details": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain address of the location. Required for online locations.\n\n:::caution\nThe `domain` parameter's value must be unique across all locations.\n:::"
              }
            },
            "required": [
              "domain"
            ]
          }
        },
        "required": [
          "name",
          "type",
          "details"
        ]
      },
      "Location-Update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the location. \n\n:::caution\nThe `name` parameter's value must be unique across all locations.\n:::"
          },
          "details": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain address of the location. Required for online locations.\n\n:::caution\nThe `domain` parameter's value must be unique across all locations.\n:::",
                "example": "example.com"
              }
            }
          }
        }
      }
    },
    "examples": {
      "Req-Order-Min": {
        "summary": "Example order with minimal required parameters",
        "value": {
          "amount": 500,
          "currency": "GBP"
        }
      },
      "Req-Order-Additional": {
        "summary": "Example order with additional parameters",
        "value": {
          "amount": 500,
          "currency": "GBP",
          "capture_mode": "manual",
          "cancel_authorised_after": "PT30M",
          "customer": {
            "email": "example@example.com",
            "date_of_birth": "1990-01-01"
          },
          "description": "Example product",
          "shipping_address": {
            "street_line_1": "7 Westferry Circus",
            "city": "London",
            "country_code": "GB",
            "postcode": "E14 4HD"
          },
          "enforce_challenge": "forced",
          "metadata": {
            "product_type": "Example"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/orders/12345"
          },
          "redirect_url": "https://www.example.com/redirect",
          "statement_descriptor_suffix": "12345"
        }
      },
      "Req-Order-Airline": {
        "summary": "Example order with additional airline data",
        "value": {
          "amount": 500,
          "currency": "GBP",
          "settlement_currency": "EUR",
          "description": "Example order description",
          "customer": {
            "full_name": "Example Customer",
            "phone": "+441234567890",
            "email": "example@example.com"
          },
          "enforce_challenge": "forced",
          "capture_mode": "manual",
          "cancel_authorised_after": "PT30M",
          "industry_data": {
            "type": "airline",
            "booking_id": "unique-booking-id-12345",
            "fulfillment_date": "2023-07-10T14:00:00.069624Z",
            "ticket_type": "flexible",
            "crs_code": "DATS",
            "ticket_change_indicator": "new",
            "refundability": "refundable",
            "passengers": [
              {
                "first_name": "Example",
                "last_name": "Customer"
              },
              {
                "first_name": "John",
                "last_name": "Doe"
              }
            ],
            "journey_legs": [
              {
                "sequence": 1,
                "departure_airport_code": "FRA",
                "arrival_airport_code": "LHR",
                "flight_number": "670",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 2,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "DUB",
                "flight_number": "678",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T15:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 3,
                "departure_airport_code": "DUB",
                "arrival_airport_code": "LHR",
                "flight_number": "679",
                "fare_base_code": "F",
                "travel_date": "2023-07-15T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 4,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "FRA",
                "flight_number": "671",
                "fare_base_code": "F",
                "travel_date": "2023-07-10T14:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              }
            ],
            "booking_url": "https://example.com/bookings/1234"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/ticketnumber-12345",
            "reference": "example_airline_reference"
          },
          "redirect_url": "https://www.example.com/redirect"
        }
      },
      "Req-Order-Crypto": {
        "summary": "Example order with additional crypto transaction data",
        "value": {
          "amount": 26100,
          "currency": "EUR",
          "settlement_currency": "EUR",
          "description": "Customer wants to buy 0.01 BTC",
          "customer": {
            "id": "db186257-3031-4726-98ea-f2260ea115f0"
          },
          "capture_mode": "manual",
          "cancel_authorised_after": "PT30M",
          "industry_data": {
            "type": "crypto",
            "transactions": [
              {
                "id": "7b2a8ed4-5889-4c0c-a8cc-299aff1c881b",
                "status": "pending",
                "recipient_wallet_id": "64a6f159-0a60-a446-880e-e449a1f62f7c"
              }
            ],
            "subseller_mcc": "1234",
            "subseller_url": "https://example.com"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/cryptotransactionnumber-12345",
            "reference": "example_crypto_reference"
          },
          "redirect_url": "https://www.example.com/redirect"
        }
      },
      "Req-Order-Marketplace": {
        "summary": "Example order with additional marketplace data",
        "value": {
          "amount": 10000,
          "currency": "EUR",
          "industry_data": {
            "type": "marketplace",
            "subseller": {
              "id": "123-45-67",
              "name": "Example Subseller",
              "website": "https://example.com/123-45-67",
              "phone": "+441234567890",
              "address": {
                "street_line_1": "1 Canada Square",
                "street_line_2": "Revolut LTD, Level 39",
                "postcode": "E14 4HD",
                "country_code": "GB",
                "country_subdivision_code": "GB-LND",
                "city": "London",
                "region": "Greater London"
              }
            }
          }
        }
      },
      "Req-Order-Event": {
        "summary": "Example order with additional event data",
        "value": {
          "amount": 100,
          "currency": "GBP",
          "industry_data": {
            "type": "event",
            "booking_id": "example_booking_123",
            "events": [
              {
                "start_date": "2025-03-04T14:00:00Z",
                "end_date": "2025-03-04T17:00:00Z",
                "supplier": "Example Supplier",
                "supplier_payment_date": "2025-03-03T14:00:15Z",
                "name": "Example Event",
                "location": {
                  "street_line_1": "Example Street 123",
                  "street_line_2": "II/123",
                  "region": "London",
                  "city": "London",
                  "country_code": "GB",
                  "postcode": "123456"
                },
                "category": "exhibition",
                "market": "primary",
                "tickets": [
                  {
                    "id": "example_ticket_1",
                    "transferable": false,
                    "refundability": "partially_refundable"
                  },
                  {
                    "id": "example_ticket_2",
                    "transferable": true,
                    "refundability": "non_refundable"
                  },
                  {
                    "id": "example_ticket_3"
                  }
                ]
              }
            ]
          }
        }
      },
      "Req-Order-Lodging": {
        "summary": "Example order with additional lodging data",
        "value": {
          "amount": 100,
          "currency": "GBP",
          "industry_data": {
            "type": "lodging",
            "booking_id": "example_booking_123",
            "check_in_date": "2025-05-01T15:00:00Z",
            "check_out_date": "2025-05-05T11:00:00Z",
            "supplier_payment_date": "2025-05-05T11:00:00Z",
            "category": "bed_and_breakfast",
            "booking_type": "flexible",
            "refundability": "partially_refundable",
            "location": {
              "street_line_1": "Example Street 123",
              "street_line_2": "II/123",
              "region": "London",
              "city": "London",
              "country_code": "GB",
              "postcode": "123456"
            },
            "guests": [
              {
                "first_name": "First",
                "last_name": "Guest"
              },
              {
                "first_name": "Second",
                "last_name": "Guest"
              }
            ]
          }
        }
      },
      "Res-Order-Min": {
        "summary": "Example order response with minimal required parameters",
        "value": {
          "id": "6516e61c-d279-a454-a837-bc52ce55ed49",
          "token": "0adc0e3c-ab44-4f33-bcc0-534ded7354ce",
          "type": "payment",
          "state": "pending",
          "created_at": "2023-09-29T14:58:36.079398Z",
          "updated_at": "2023-09-29T14:58:36.079398Z",
          "amount": 500,
          "currency": "GBP",
          "outstanding_amount": 500,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/0adc0e3c-ab44-4f33-bcc0-534ded7354ce",
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Additional": {
        "summary": "Example order response with additional parameters",
        "value": {
          "id": "6516e6ec-c7f7-a0fb-a6d3-add05fa46d2f",
          "token": "1058031d-1e71-4d07-9f97-5ad388a1346c",
          "type": "payment",
          "state": "pending",
          "created_at": "2023-09-29T15:02:04.083787Z",
          "updated_at": "2023-09-29T15:02:04.083787Z",
          "amount": 500,
          "currency": "GBP",
          "outstanding_amount": 500,
          "capture_mode": "manual",
          "description": "Example product",
          "checkout_url": "https://checkout.revolut.com/payment-link/1058031d-1e71-4d07-9f97-5ad388a1346c",
          "redirect_url": "https://www.example.com/redirect",
          "shipping_address": {
            "street_line_1": "7 Westferry Circus",
            "city": "London",
            "country_code": "GB",
            "postcode": "E14 4HD"
          },
          "metadata": {
            "product_type": "Example"
          },
          "enforce_challenge": "forced",
          "customer": {
            "id": "467646d6-e452-4d1e-a401-703f09cd3818",
            "email": "example@example.com",
            "date_of_birth": "1990-01-01"
          },
          "merchant_order_data": {
            "url": "https://example.com/orders/12345"
          },
          "statement_descriptor_suffix": "12345"
        }
      },
      "Res-Order-Airline": {
        "summary": "Example order response with additional airline data",
        "value": {
          "id": "6516ed0c-098f-aa19-80e5-9d92f52b35e0",
          "token": "061f2c63-e36b-421e-9ece-5adfcd580886",
          "type": "payment",
          "state": "pending",
          "created_at": "2023-09-29T15:28:12.114992Z",
          "updated_at": "2023-09-29T15:28:12.114992Z",
          "amount": 500,
          "currency": "GBP",
          "outstanding_amount": 500,
          "settlement_currency": "EUR",
          "capture_mode": "manual",
          "description": "Example order description",
          "checkout_url": "https://checkout.revolut.com/payment-link/061f2c63-e36b-421e-9ece-5adfcd580886",
          "redirect_url": "https://www.example.com/redirect",
          "cancel_authorised_after": "PT30M",
          "industry_data": {
            "type": "airline",
            "booking_id": "unique-booking-id-12345",
            "fulfillment_date": "2023-07-10T14:00:00.069624Z",
            "ticket_type": "flexible",
            "crs_code": "DATS",
            "ticket_change_indicator": "new",
            "refundability": "refundable",
            "passengers": [
              {
                "first_name": "Example",
                "last_name": "Customer"
              },
              {
                "first_name": "John",
                "last_name": "Doe"
              }
            ],
            "journey_legs": [
              {
                "sequence": 1,
                "departure_airport_code": "FRA",
                "arrival_airport_code": "LHR",
                "flight_number": "670",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 2,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "DUB",
                "flight_number": "678",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T15:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 3,
                "departure_airport_code": "DUB",
                "arrival_airport_code": "LHR",
                "flight_number": "679",
                "fare_base_code": "F",
                "travel_date": "2023-07-15T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 4,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "FRA",
                "flight_number": "671",
                "fare_base_code": "F",
                "travel_date": "2023-07-10T14:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              }
            ],
            "booking_url": "https://example.com/bookings/1234"
          },
          "enforce_challenge": "forced",
          "customer": {
            "id": "db186257-3031-4726-98ea-f2260ea115f0",
            "email": "example@example.com",
            "phone": "+441234567890",
            "full_name": "Example Customer"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/ticketnumber-12345",
            "reference": "example_airline_reference"
          }
        }
      },
      "Res-Order-Crypto": {
        "summary": "Example order response with additional crypto transaction data",
        "value": {
          "id": "6516edb9-74af-ae47-829b-1475e807a8d7",
          "token": "1e619c26-d954-4d45-94ab-aba1e407fcee",
          "type": "payment",
          "state": "pending",
          "created_at": "2023-09-29T15:31:05.746826Z",
          "updated_at": "2023-09-29T15:31:05.746826Z",
          "amount": 26100,
          "currency": "EUR",
          "outstanding_amount": 26100,
          "settlement_currency": "EUR",
          "capture_mode": "manual",
          "description": "Customer wants to buy 0.01 BTC",
          "checkout_url": "https://checkout.revolut.com/payment-link/1e619c26-d954-4d45-94ab-aba1e407fcee",
          "redirect_url": "https://www.example.com/redirect",
          "industry_data": {
            "type": "crypto",
            "transactions": [
              {
                "id": "7b2a8ed4-5889-4c0c-a8cc-299aff1c881b",
                "status": "pending",
                "recipient_wallet_id": "64a6f159-0a60-a446-880e-e449a1f62f7c"
              }
            ],
            "subseller_mcc": "1234",
            "subseller_url": "https://example.com"
          },
          "enforce_challenge": "automatic",
          "customer": {
            "id": "db186257-3031-4726-98ea-f2260ea115f0",
            "email": "example@example.com",
            "phone": "+44123456789",
            "full_name": "Example Customer"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/cryptotransactionnumber-12345",
            "reference": "example_crypto_reference"
          }
        }
      },
      "Res-Order-Marketplace": {
        "summary": "Example order response with additional marketplace data",
        "value": {
          "id": "670920dc-d343-abf8-963a-68ae1bc8ae58",
          "token": "41aabe45-b444-45e6-8363-f0433452e138",
          "type": "payment",
          "state": "pending",
          "created_at": "2024-10-11T12:58:04.826974Z",
          "updated_at": "2024-10-11T12:58:04.826974Z",
          "amount": 10000,
          "currency": "EUR",
          "outstanding_amount": 10000,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/41aabe45-b444-45e6-8363-f0433452e138",
          "industry_data": {
            "type": "marketplace",
            "subseller": {
              "id": "123-45-67",
              "name": "Example Subseller",
              "address": {
                "street_line_1": "1 Canada Square",
                "street_line_2": "Revolut LTD, Level 39",
                "region": "Greater London",
                "city": "London",
                "country_code": "GB",
                "country_subdivision_code": "GB-LND",
                "postcode": "E14 4HD"
              },
              "website": "https://example.com/123-45-67",
              "phone": "+441234567890"
            }
          },
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Event": {
        "summary": "Example order response with additional event data",
        "value": {
          "id": "67bf20c4-59a5-a7a9-81ad-052fda5f80eb",
          "token": "8737a497-9bae-4647-90bf-1abe2fd9162a",
          "type": "payment",
          "state": "pending",
          "created_at": "2025-02-26T14:10:12.804901Z",
          "updated_at": "2025-02-26T14:10:12.804901Z",
          "amount": 100,
          "currency": "GBP",
          "outstanding_amount": 100,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/8737a497-9bae-4647-90bf-1abe2fd9162a",
          "industry_data": {
            "type": "event",
            "booking_id": "example_booking_123",
            "events": [
              {
                "start_date": "2025-03-04T14:00:00Z",
                "end_date": "2025-03-04T17:00:00Z",
                "supplier": "Example Supplier",
                "supplier_payment_date": "2025-03-03T14:00:15Z",
                "name": "Example Event",
                "location": {
                  "street_line_1": "Example Street 123",
                  "street_line_2": "II/123",
                  "region": "London",
                  "city": "London",
                  "country_code": "GB",
                  "postcode": "123456"
                },
                "category": "exhibition",
                "market": "primary",
                "tickets": [
                  {
                    "id": "example_ticket_1",
                    "transferable": false,
                    "refundability": "partially_refundable"
                  },
                  {
                    "id": "example_ticket_2",
                    "transferable": true,
                    "refundability": "non_refundable"
                  },
                  {
                    "id": "example_ticket_3"
                  }
                ]
              }
            ]
          },
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Lodging": {
        "summary": "Example order response with additional lodging data",
        "value": {
          "id": "67c70d42-1545-a73d-a4a5-35b7ac49e1da",
          "token": "9effe2b6-8907-4954-9e9b-696f763f7e08",
          "type": "payment",
          "state": "pending",
          "created_at": "2025-03-04T14:25:06.099782Z",
          "updated_at": "2025-03-04T14:25:06.099782Z",
          "amount": 100,
          "currency": "GBP",
          "outstanding_amount": 100,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/9effe2b6-8907-4954-9e9b-696f763f7e08",
          "industry_data": {
            "type": "lodging",
            "booking_id": "example_booking_123",
            "check_out_date": "2025-05-05T11:00:00Z",
            "booking_type": "flexible",
            "refundability": "partially_refundable",
            "location": {
              "street_line_1": "Example Street 123",
              "street_line_2": "II/123",
              "region": "London",
              "city": "London",
              "country_code": "GB",
              "postcode": "123456"
            },
            "guests": [
              {
                "first_name": "First",
                "last_name": "Guest"
              },
              {
                "first_name": "Second",
                "last_name": "Guest"
              }
            ],
            "check_in_date": "2025-05-01T15:00:00Z",
            "supplier_payment_date": "2025-05-05T11:00:00Z",
            "category": "bed_and_breakfast"
          },
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Cancel-Min": {
        "summary": "Example order response with minimal required parameters",
        "value": {
          "id": "6516f565-c903-ae7d-8582-0bc70468ec29",
          "token": "579462b3-da89-4a46-8690-572d3968573f",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2023-09-29T16:03:49.569437Z",
          "updated_at": "2023-09-29T16:04:30.727004Z",
          "amount": 500,
          "currency": "GBP",
          "refunded_amount": 0,
          "outstanding_amount": 0,
          "capture_mode": "automatic",
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Cancel-Additional": {
        "summary": "Example order response with additional parameters",
        "value": {
          "id": "6516f379-c03f-adf3-a2bf-24b328909731",
          "token": "91533c29-47d1-4ae9-a73f-74225fd4b176",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2023-09-29T15:55:37.201407Z",
          "updated_at": "2023-09-29T15:56:38.398961Z",
          "amount": 500,
          "currency": "GBP",
          "refunded_amount": 0,
          "outstanding_amount": 500,
          "capture_mode": "manual",
          "cancel_authorised_after": "PT30M",
          "description": "Example product",
          "checkout_url": "https://checkout.revolut.com/payment-link/91533c29-47d1-4ae9-a73f-74225fd4b176",
          "redirect_url": "https://www.example.com/redirect",
          "shipping_address": {
            "street_line_1": "7 Westferry Circus",
            "city": "London",
            "country_code": "GB",
            "postcode": "E14 4HD"
          },
          "metadata": {
            "product_type": "Example"
          },
          "payments": [
            {
              "id": "6516f38a-a12b-aca3-83f2-6ed16d6ed246",
              "state": "authorised",
              "created_at": "2023-09-29T15:55:54.579311Z",
              "updated_at": "2023-09-29T15:56:38.403232Z",
              "amount": 500,
              "currency": "GBP",
              "settled_amount": 500,
              "settled_currency": "GBP",
              "billing_address": {
                "street_line_1": "26 Atkins Avenue",
                "street_line_2": "New York 42233",
                "city": "SentinelFraudLow",
                "country_code": "GB",
                "postcode": "PE3 9UP"
              },
              "risk_level": "low",
              "fees": [],
              "payment_method": {
                "type": "revolut_pay_account"
              }
            }
          ],
          "enforce_challenge": "forced",
          "customer": {
            "id": "3c131306-0a0a-4f54-99d7-3fb2e027c6f7",
            "email": "example@example.com",
            "phone": "+441234567890",
            "full_name": "Example Customer"
          },
          "merchant_order_data": {
            "url": "https://example.com/orders/12345"
          },
          "statement_descriptor_suffix": "12345"
        }
      },
      "Res-Order-Cancel-Airline": {
        "summary": "Example order response with additional airline data",
        "value": {
          "id": "6516f2f3-fd2c-ac2c-9bf2-3e02711dd3fb",
          "token": "245e63f3-1e44-40db-bcd4-4448263d3fa2",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2023-09-29T15:53:23.234913Z",
          "updated_at": "2023-09-29T16:24:39.366956Z",
          "amount": 500,
          "currency": "GBP",
          "outstanding_amount": 500,
          "settlement_currency": "EUR",
          "capture_mode": "manual",
          "description": "Example order description",
          "checkout_url": "https://checkout.revolut.com/payment-link/245e63f3-1e44-40db-bcd4-4448263d3fa2",
          "redirect_url": "https://www.example.com/redirect",
          "cancel_authorised_after": "PT30M",
          "industry_data": {
            "type": "airline",
            "booking_id": "unique-booking-id-12345",
            "fulfillment_date": "2023-07-10T14:00:00.069624Z",
            "ticket_type": "flexible",
            "crs_code": "DATS",
            "ticket_change_indicator": "new",
            "refundability": "refundable",
            "passengers": [
              {
                "first_name": "Example",
                "last_name": "Customer"
              },
              {
                "first_name": "John",
                "last_name": "Doe"
              }
            ],
            "journey_legs": [
              {
                "sequence": 1,
                "departure_airport_code": "FRA",
                "arrival_airport_code": "LHR",
                "flight_number": "670",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 2,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "DUB",
                "flight_number": "678",
                "fare_base_code": "J",
                "travel_date": "2023-07-10T15:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 3,
                "departure_airport_code": "DUB",
                "arrival_airport_code": "LHR",
                "flight_number": "679",
                "fare_base_code": "F",
                "travel_date": "2023-07-15T10:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              },
              {
                "sequence": 4,
                "departure_airport_code": "LHR",
                "arrival_airport_code": "FRA",
                "flight_number": "671",
                "fare_base_code": "F",
                "travel_date": "2023-07-10T14:00:00.069624Z",
                "airline_name": "AerLingus",
                "airline_code": "EI"
              }
            ],
            "booking_url": "https://example.com/bookings/1234"
          },
          "payments": [
            {
              "id": "6516f315-f713-a5fd-8299-f28820937409",
              "state": "failed",
              "created_at": "2023-09-29T15:53:57.268142Z",
              "updated_at": "2023-09-29T16:24:39.374460Z",
              "amount": 500,
              "currency": "GBP",
              "settled_amount": 576,
              "settled_currency": "EUR",
              "risk_level": "low",
              "fees": [],
              "payment_method": {
                "type": "card",
                "card_brand": "mastercard",
                "funding": "credit",
                "card_country_code": "MT",
                "card_bin": "542071",
                "card_last_four": "0016",
                "card_expiry": "12/28",
                "cardholder_name": "Example Holder",
                "checks": {
                  "three_ds": {
                    "state": "verified",
                    "version": 2
                  },
                  "cvv_verification": "match"
                }
              }
            }
          ],
          "enforce_challenge": "forced",
          "customer": {
            "id": "db186257-3031-4726-98ea-f2260ea115f0",
            "email": "example@example.com",
            "phone": "+441234567890",
            "full_name": "Example Customer"
          },
          "merchant_order_data": {
            "url": "https://www.airline.com/ticketnumber-12345",
            "reference": "example_airline_reference"
          }
        }
      },
      "Res-Order-Cancel-Crypto": {
        "summary": "Example order response with additional crypto transaction data",
        "value": {
          "id": "6516f11e-5eb1-a223-858d-2c9a7f2a7189",
          "token": "74dce962-2f86-4d86-98b3-a0c590bccc56",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2023-09-29T15:45:34.922508Z",
          "updated_at": "2023-09-29T15:50:37.989334Z",
          "amount": 26100,
          "currency": "EUR",
          "refunded_amount": 0,
          "outstanding_amount": 26100,
          "settlement_currency": "EUR",
          "capture_mode": "manual",
          "cancel_authorised_after": "PT30M",
          "description": "Customer wants to buy 0.01 BTC",
          "checkout_url": "https://checkout.revolut.com/payment-link/74dce962-2f86-4d86-98b3-a0c590bccc56",
          "redirect_url": "https://www.example.com/redirect",
          "industry_data": {
            "type": "crypto",
            "transactions": [
              {
                "id": "7b2a8ed4-5889-4c0c-a8cc-299aff1c881b",
                "status": "pending",
                "recipient_wallet_id": "64a6f159-0a60-a446-880e-e449a1f62f7c"
              }
            ],
            "subseller_mcc": "1234",
            "subseller_url": "https://example.com"
          },
          "payments": [
            {
              "id": "6516f139-a0ad-aaf9-a3a5-0f6ee8c9fde5",
              "state": "failed",
              "decline_reason": "technical_error",
              "created_at": "2023-09-29T15:46:01.823402Z",
              "updated_at": "2023-09-29T15:46:03.199834Z",
              "amount": 26100,
              "currency": "EUR",
              "settled_amount": 26100,
              "settled_currency": "EUR",
              "risk_level": "low",
              "fees": [],
              "payment_method": {
                "type": "card",
                "card_brand": "mastercard",
                "funding": "credit",
                "card_country_code": "MT",
                "card_bin": "542071",
                "card_last_four": "0016",
                "card_expiry": "12/28",
                "cardholder_name": "Test Holder",
                "checks": {
                  "three_ds": {
                    "state": "failed",
                    "version": 2
                  }
                }
              }
            },
            {
              "id": "6516f186-0cf3-aefe-b6da-af1a5dad1630",
              "state": "authorised",
              "created_at": "2023-09-29T15:47:18.050227Z",
              "updated_at": "2023-09-29T15:50:37.993217Z",
              "amount": 26100,
              "currency": "EUR",
              "settled_amount": 26100,
              "settled_currency": "EUR",
              "billing_address": {
                "street_line_1": "26 Atkins Avenue",
                "street_line_2": "New York 42233",
                "city": "SentinelFraudLow",
                "country_code": "GB",
                "postcode": "PE3 9UP"
              },
              "risk_level": "low",
              "fees": [],
              "payment_method": {
                "type": "revolut_pay_account"
              }
            }
          ],
          "enforce_challenge": "automatic",
          "customer": {
            "id": "3c131306-0a0a-4f54-99d7-3fb2e027c6f7",
            "email": "example@example.com",
            "phone": "+441234567890",
            "full_name": "Example Customer"
          },
          "merchant_order_data": {
            "url": "https://www.example.com/cryptotransactionnumber-12345",
            "reference": "example_crypto_reference"
          }
        }
      },
      "Res-Order-Cancel-Marketplace": {
        "summary": "Example order response with additional marketplace data",
        "value": {
          "id": "670920dc-d343-abf8-963a-68ae1bc8ae58",
          "token": "41aabe45-b444-45e6-8363-f0433452e138",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2024-10-11T12:58:04.826974Z",
          "updated_at": "2024-10-11T12:58:04.826974Z",
          "amount": 10000,
          "currency": "EUR",
          "outstanding_amount": 10000,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/41aabe45-b444-45e6-8363-f0433452e138",
          "industry_data": {
            "type": "marketplace",
            "subseller": {
              "id": "123-45-67",
              "name": "Example Subseller",
              "address": {
                "street_line_1": "1 Canada Square",
                "street_line_2": "Revolut LTD, Level 39",
                "region": "Greater London",
                "city": "London",
                "country_code": "GB",
                "country_subdivision_code": "GB-LND",
                "postcode": "E14 4HD"
              },
              "website": "https://example.com/123-45-67",
              "phone": "+441234567890"
            }
          },
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Cancel-Event": {
        "summary": "Example order response with additional event data",
        "value": {
          "id": "67bf20c4-59a5-a7a9-81ad-052fda5f80eb",
          "token": "8737a497-9bae-4647-90bf-1abe2fd9162a",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2025-02-26T14:10:12.804901Z",
          "updated_at": "2025-02-26T14:10:12.804901Z",
          "amount": 100,
          "currency": "GBP",
          "outstanding_amount": 100,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/8737a497-9bae-4647-90bf-1abe2fd9162a",
          "industry_data": {
            "type": "event",
            "booking_id": "example_booking_123",
            "events": [
              {
                "start_date": "2025-03-04T14:00:00Z",
                "end_date": "2025-03-04T17:00:00Z",
                "supplier": "Example Supplier",
                "supplier_payment_date": "2025-03-03T14:00:15Z",
                "name": "Example Event",
                "location": {
                  "street_line_1": "Example Street 123",
                  "street_line_2": "II/123",
                  "region": "London",
                  "city": "London",
                  "country_code": "GB",
                  "postcode": "123456"
                },
                "category": "exhibition",
                "market": "primary",
                "tickets": [
                  {
                    "id": "example_ticket_1",
                    "transferable": false,
                    "refundability": "partially_refundable"
                  },
                  {
                    "id": "example_ticket_2",
                    "transferable": true,
                    "refundability": "non_refundable"
                  },
                  {
                    "id": "example_ticket_3"
                  }
                ]
              }
            ]
          },
          "enforce_challenge": "automatic"
        }
      },
      "Res-Order-Cancel-Lodging": {
        "summary": "Example order response with additional lodging data",
        "value": {
          "id": "67c70d42-1545-a73d-a4a5-35b7ac49e1da",
          "token": "9effe2b6-8907-4954-9e9b-696f763f7e08",
          "type": "payment",
          "state": "cancelled",
          "created_at": "2025-03-04T14:25:06.099782Z",
          "updated_at": "2025-03-04T14:25:06.099782Z",
          "amount": 100,
          "currency": "GBP",
          "outstanding_amount": 100,
          "capture_mode": "automatic",
          "checkout_url": "https://checkout.revolut.com/payment-link/9effe2b6-8907-4954-9e9b-696f763f7e08",
          "industry_data": {
            "type": "lodging",
            "booking_id": "example_booking_123",
            "check_out_date": "2025-05-05T11:00:00Z",
            "booking_type": "flexible",
            "refundability": "partially_refundable",
            "location": {
              "street_line_1": "Example Street 123",
              "street_line_2": "II/123",
              "region": "London",
              "city": "London",
              "country_code": "GB",
              "postcode": "123456"
            },
            "guests": [
              {
                "first_name": "First",
                "last_name": "Guest"
              },
              {
                "first_name": "Second",
                "last_name": "Guest"
              }
            ],
            "check_in_date": "2025-05-01T15:00:00Z",
            "supplier_payment_date": "2025-05-05T11:00:00Z",
            "category": "bed_and_breakfast"
          },
          "enforce_challenge": "automatic"
        }
      }
    },
    "callbacks": {
      "Webhook-Event": {
        "{$request.body#/url}": {
          "post": {
            "summary": "Send webhook event to webhook URL",
            "description": "The following webhook event payload is sent as a HTTP POST request to the URL registered as the merchant's webhook server via the [Create a webhook](https://developer.revolut.com/docs/merchant/create-webhook) operation.\n\nThe delivery of the webhook events happen asynchronously, based on the events you subscribed to.\n\n:::info\nFor more information, see: [Use webhooks to track order and payment lifecycle](https://developer.revolut.com/docs/guides/accept-payments/tutorials/work-with-webhooks/using-webhooks).\n:::\n\n### IP allowlisting\n\nTo ensure secure delivery of webhook events, please allowlist the following IP addresses from which the events originate:\n\n**Production webhook IPs:**\n- `35.246.21.235`\n- `34.89.70.170`\n\n**Sandbox webhook IPs:**\n- `35.242.130.242`\n- `35.242.162.241`",
            "parameters": [
              {
                "name": "Revolut-Request-Timestamp",
                "in": "header",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The [UNIX timestamp](https://www.unixtimestamp.com/) of the date and time when the webhook event was sent from Revolut. Used to verify the webhook event payload was actually sent by Revolut.\n\n:::info\nFor more information, see: [Verify payload signature](https://developer.revolut.com/docs/guides/accept-payments/tutorials/work-with-webhooks/verify-the-payload-signature)\n:::"
              },
              {
                "name": "Revolut-Signature",
                "in": "header",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The payload signature computed by Revolut using a Hash-based Message Authentication Code (HMAC). Used to verify the webhook event payload was actually sent by Revolut.\n\n:::info\nFor more information, see: [Verify payload signature](https://developer.revolut.com/docs/guides/accept-payments/tutorials/work-with-webhooks/verify-the-payload-signature)\n:::"
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "discriminator": {
                      "propertyName": "event",
                      "mapping": {
                        "Order or payment event": "#/components/schemas/Webhook-Order-Event",
                        "Payout event": "#/components/schemas/Webhook-Payout-Event",
                        "Dispute event": "#/components/schemas/Webhook-Dispute-Event"
                      }
                    },
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Webhook-Order-Event"
                      },
                      {
                        "$ref": "#/components/schemas/Webhook-Payout-Event"
                      },
                      {
                        "$ref": "#/components/schemas/Webhook-Dispute-Event"
                      }
                    ]
                  },
                  "examples": {
                    "order_event": {
                      "summary": "Webhook event related to an order or payment",
                      "value": {
                        "event": "ORDER_COMPLETED",
                        "order_id": "6634c172-3398-ac93-aee9-50de0282e3ac",
                        "merchant_order_ext_ref": "Example reference #123"
                      }
                    },
                    "payout_event": {
                      "summary": "Webhook event related to a payout",
                      "value": {
                        "event": "PAYOUT_COMPLETED",
                        "payout_id": "6634c172-3398-ac93-aee9-50de0282e3ac"
                      }
                    },
                    "dispute_event": {
                      "summary": "Webhook event related to a dispute",
                      "value": {
                        "event": "DISPUTE_ACTION_REQUIRED",
                        "dispute_id": "ab934829-e4ba-4e7f-8a21-365cad85c763"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "204": {
                "description": "If the webhook event was delivered successfully, we recommend to respond with a `204` code.\n\n:::info\nYou can respond to and acknowledge the delivery of a webhook event by any HTTP response code between `200-399`.\n:::"
              },
              "4XX": {
                "description": "If the webhook event delivery times out or the delivery of the events fails, you can respond with any HTTP `4XX` code. In this case, Revolut will retry sending the webhook event 3 more times, each with a 10-minute delay."
              }
            }
          }
        }
      }
    }
  }
}